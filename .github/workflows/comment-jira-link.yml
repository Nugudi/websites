name: 'Comment Jira Ticket Link on PR'

on:
  pull_request:
    types:
      - opened
      - reopened

permissions:
  issues: write
  pull-requests: write

jobs:
  comment_jira_link:
    name: Comment Jira Ticket Link
    runs-on: ubuntu-latest

    steps:
      - name: Comment Jira Ticket Link
        uses: actions/github-script@v7
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        with:
          script: |
            const pr = context.payload.pull_request;
            const title = pr.title;
            const match = title.match(/NUGUDI-\d+/);
            if (!match) {
              console.log('No Jira ticket found in PR title.');
              return;
            }

            const ticket = match[0];
            const apiBase = process.env.JIRA_BASE_URL.replace(/\/+$/, '');
            const jiraIssueUrl = `${apiBase}/browse/${ticket}`;
            const apiUrl = `${apiBase}/rest/api/3/issue/${ticket}`;

            // Jira API 호출
            const res = await fetch(apiUrl, {
              method: 'GET',
              headers: {
                'Authorization': `Basic ${Buffer.from(process.env.JIRA_USER_EMAIL + ':' + process.env.JIRA_API_TOKEN).toString('base64')}`,
                'Accept': 'application/json'
              }
            });
            if (!res.ok) {
              console.log(`Failed to fetch Jira issue ${ticket}: ${res.status}`);
              return;
            }

            const issue = await res.json();
            const summary = issue.fields.summary;
            const status = issue.fields.status.name;
            const assignee = issue.fields.assignee?.displayName || 'Unassigned';

            // 기존 코멘트 확인
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number
            });
            const existing = comments.find(c => c.body.startsWith('<!-- jira-comment -->'));

            const commentBody = [
              '<!-- jira-comment -->',
              `**Jira Issue:** [${ticket}](${jiraIssueUrl})`,
              '',
              `- **제목:** ${summary}`,
              `- **상태:** ${status}`,
              `- **담당자:** ${assignee}`
            ].join('\n');

            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: commentBody
              });
            }
