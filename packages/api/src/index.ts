/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ÎÑàÍµ¨Îîî API
 * Íµ¨ÎÇ¥ÏãùÎãπ ÌîåÎû´Ìèº API
 * OpenAPI spec version: v1
 */

import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";
import { http } from "./api/http";
import type {
  EmailVerificationRequest,
  EmailVerifyRequest,
  SendEmailVerificationCode200,
  SignUpLocalRequest,
  SuccessResponseEmailVerifyResponse,
  SuccessResponseSignUpResponse,
} from "./index.schemas";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export type signUpLocalResponse201 = {
  data: SuccessResponseSignUpResponse;
  status: 201;
};

export type signUpLocalResponseComposite = signUpLocalResponse201;

export type signUpLocalResponse = signUpLocalResponseComposite & {
  headers: Headers;
};

export const getSignUpLocalUrl = () => {
  return `https://dev.nugudi.com/api/v1/auth/signup/local`;
};

export const signUpLocal = async (
  signUpLocalRequest: SignUpLocalRequest,
  options?: RequestInit,
): Promise<signUpLocalResponse> => {
  return http<signUpLocalResponse>(getSignUpLocalUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(signUpLocalRequest),
  });
};

export const getSignUpLocalMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof signUpLocal>>,
    TError,
    { data: SignUpLocalRequest },
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof signUpLocal>>,
  TError,
  { data: SignUpLocalRequest },
  TContext
> => {
  const mutationKey = ["signUpLocal"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof signUpLocal>>,
    { data: SignUpLocalRequest }
  > = (props) => {
    const { data } = props ?? {};

    return signUpLocal(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SignUpLocalMutationResult = NonNullable<
  Awaited<ReturnType<typeof signUpLocal>>
>;
export type SignUpLocalMutationBody = SignUpLocalRequest;
export type SignUpLocalMutationError = unknown;

export const useSignUpLocal = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof signUpLocal>>,
      TError,
      { data: SignUpLocalRequest },
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof signUpLocal>>,
  TError,
  { data: SignUpLocalRequest },
  TContext
> => {
  const mutationOptions = getSignUpLocalMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type verifyEmailCodeResponse200 = {
  data: SuccessResponseEmailVerifyResponse;
  status: 200;
};

export type verifyEmailCodeResponseComposite = verifyEmailCodeResponse200;

export type verifyEmailCodeResponse = verifyEmailCodeResponseComposite & {
  headers: Headers;
};

export const getVerifyEmailCodeUrl = () => {
  return `https://dev.nugudi.com/api/v1/auth/email/verify-code`;
};

export const verifyEmailCode = async (
  emailVerifyRequest: EmailVerifyRequest,
  options?: RequestInit,
): Promise<verifyEmailCodeResponse> => {
  return http<verifyEmailCodeResponse>(getVerifyEmailCodeUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(emailVerifyRequest),
  });
};

export const getVerifyEmailCodeMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof verifyEmailCode>>,
    TError,
    { data: EmailVerifyRequest },
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof verifyEmailCode>>,
  TError,
  { data: EmailVerifyRequest },
  TContext
> => {
  const mutationKey = ["verifyEmailCode"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof verifyEmailCode>>,
    { data: EmailVerifyRequest }
  > = (props) => {
    const { data } = props ?? {};

    return verifyEmailCode(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type VerifyEmailCodeMutationResult = NonNullable<
  Awaited<ReturnType<typeof verifyEmailCode>>
>;
export type VerifyEmailCodeMutationBody = EmailVerifyRequest;
export type VerifyEmailCodeMutationError = unknown;

export const useVerifyEmailCode = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof verifyEmailCode>>,
      TError,
      { data: EmailVerifyRequest },
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof verifyEmailCode>>,
  TError,
  { data: EmailVerifyRequest },
  TContext
> => {
  const mutationOptions = getVerifyEmailCodeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type sendEmailVerificationCodeResponse200 = {
  data: SendEmailVerificationCode200;
  status: 200;
};

export type sendEmailVerificationCodeResponseComposite =
  sendEmailVerificationCodeResponse200;

export type sendEmailVerificationCodeResponse =
  sendEmailVerificationCodeResponseComposite & {
    headers: Headers;
  };

export const getSendEmailVerificationCodeUrl = () => {
  return `https://dev.nugudi.com/api/v1/auth/email/send-code`;
};

export const sendEmailVerificationCode = async (
  emailVerificationRequest: EmailVerificationRequest,
  options?: RequestInit,
): Promise<sendEmailVerificationCodeResponse> => {
  return http<sendEmailVerificationCodeResponse>(
    getSendEmailVerificationCodeUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(emailVerificationRequest),
    },
  );
};

export const getSendEmailVerificationCodeMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sendEmailVerificationCode>>,
    TError,
    { data: EmailVerificationRequest },
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof sendEmailVerificationCode>>,
  TError,
  { data: EmailVerificationRequest },
  TContext
> => {
  const mutationKey = ["sendEmailVerificationCode"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof sendEmailVerificationCode>>,
    { data: EmailVerificationRequest }
  > = (props) => {
    const { data } = props ?? {};

    return sendEmailVerificationCode(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SendEmailVerificationCodeMutationResult = NonNullable<
  Awaited<ReturnType<typeof sendEmailVerificationCode>>
>;
export type SendEmailVerificationCodeMutationBody = EmailVerificationRequest;
export type SendEmailVerificationCodeMutationError = unknown;

export const useSendEmailVerificationCode = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof sendEmailVerificationCode>>,
      TError,
      { data: EmailVerificationRequest },
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof sendEmailVerificationCode>>,
  TError,
  { data: EmailVerificationRequest },
  TContext
> => {
  const mutationOptions = getSendEmailVerificationCodeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
