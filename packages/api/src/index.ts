/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * ÎÑàÍµ¨Îîî API
 * Íµ¨ÎÇ¥ÏãùÎãπ ÌîåÎû´Ìèº API
 * OpenAPI spec version: 1.0.0
 */

import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import { http } from "./api/http";
import type {
  CheckNicknameAvailabilityParams,
  EmailVerificationRequest,
  EmailVerifyRequest,
  GetCafeteriaMenuAvailabilityParams,
  GetCafeteriaMenuByDateParams,
  GetCafeteriasWithMenuParams,
  GetGoogleAuthorizeUrlParams,
  GetKakaoAuthorizeUrlParams,
  GetNaverAuthorizeUrlParams,
  GoogleLoginRequest,
  KakaoLoginRequest,
  LocalLoginRequest,
  NaverLoginRequest,
  PageResponseGetCafeteriaWithMenuResponse,
  RegisterCafeteriaMenuRequest,
  RegisterCafeteriaRequest,
  SendEmailVerificationCode200,
  SignUpLocalRequest,
  SignUpSocialRequest,
  SuccessResponseEmailVerifyResponse,
  SuccessResponseGetCafeteriaMenuAvailabilityResponse,
  SuccessResponseGetCafeteriaMenuResponse,
  SuccessResponseGetCafeteriaResponse,
  SuccessResponseGetGoogleAuthorizeResponse,
  SuccessResponseGetKakaoAuthorizeResponse,
  SuccessResponseGetMyProfileResponse,
  SuccessResponseGetNaverAuthorizeResponse,
  SuccessResponseLocalLoginResponse,
  SuccessResponseLogoutResponse,
  SuccessResponseNicknameCheckResponse,
  SuccessResponseRefreshTokenResponse,
  SuccessResponseRegisterCafeteriaMenuResponse,
  SuccessResponseRegisterCafeteriaResponse,
  SuccessResponseSignUpResponse,
  SuccessResponseSocialLoginResponse,
} from "./index.schemas";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * ÏÜåÏÖú Î°úÍ∑∏Ïù∏ÏúºÎ°ú Ïù∏Ï¶ùÏóê ÏÑ±Í≥µÌïú Ïã†Í∑ú ÌöåÏõêÏùò ÌöåÏõêÍ∞ÄÏûÖÏùÑ ÏßÑÌñâÌï©ÎãàÎã§.

ÏÇ¨Ïö© Î∞©Î≤ï:
1. Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏(/api/v1/auth/login/kakao) Ìò∏Ï∂ú
2. Ïã†Í∑ú ÌöåÏõêÏù∏ Í≤ΩÏö∞ 202 ÏÉÅÌÉúÏôÄ Ìï®Íªò registrationToken ÏàòÏã†
3. X-Registration-Token Ìó§ÎçîÏóê, Î∞õÏùÄ ÌÜ†ÌÅ∞ÏùÑ Ìè¨Ìï®ÌïòÏó¨ Î≥∏ API Ìò∏Ï∂ú
4. ÌïÑÏàò Ï†ïÎ≥¥(ÎãâÎÑ§ÏûÑ Îì±)Î•º ÏöîÏ≤≠ Î∞îÎîîÏóê Ìè¨Ìï®
5. ÌöåÏõêÍ∞ÄÏûÖ ÏÑ±Í≥µ Ïãú accessTokenÍ≥º refreshTokenÏùÑ ÏùëÎãµ Î∞îÎîîÎ°ú Î∞òÌôò

Ï£ºÏùòÏÇ¨Ìï≠:
- registrationTokenÏùÄ 30Î∂ÑÍ∞Ñ Ïú†Ìö®
- ÌÜ†ÌÅ∞ ÎßåÎ£å Ïãú Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏Î∂ÄÌÑ∞ Îã§Ïãú ÏßÑÌñâ
 * @summary ÏÜåÏÖú Í≥ÑÏ†ï ÌöåÏõêÍ∞ÄÏûÖ
 */
export type signUpSocialResponse201 = {
  data: SuccessResponseSignUpResponse;
  status: 201;
};

export type signUpSocialResponseSuccess = signUpSocialResponse201 & {
  headers: Headers;
};

export type signUpSocialResponse = signUpSocialResponseSuccess;

export const getSignUpSocialUrl = () => {
  return `https://dev.nugudi.com/api/v1/auth/signup/social`;
};

export const signUpSocial = async (
  signUpSocialRequest: SignUpSocialRequest,
  options?: RequestInit,
): Promise<signUpSocialResponse> => {
  return http<signUpSocialResponse>(getSignUpSocialUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(signUpSocialRequest),
  });
};

export const getSignUpSocialMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof signUpSocial>>,
    TError,
    { data: SignUpSocialRequest },
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof signUpSocial>>,
  TError,
  { data: SignUpSocialRequest },
  TContext
> => {
  const mutationKey = ["signUpSocial"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof signUpSocial>>,
    { data: SignUpSocialRequest }
  > = (props) => {
    const { data } = props ?? {};

    return signUpSocial(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SignUpSocialMutationResult = NonNullable<
  Awaited<ReturnType<typeof signUpSocial>>
>;
export type SignUpSocialMutationBody = SignUpSocialRequest;
export type SignUpSocialMutationError = unknown;

/**
 * @summary ÏÜåÏÖú Í≥ÑÏ†ï ÌöåÏõêÍ∞ÄÏûÖ
 */
export const useSignUpSocial = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof signUpSocial>>,
      TError,
      { data: SignUpSocialRequest },
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof signUpSocial>>,
  TError,
  { data: SignUpSocialRequest },
  TContext
> => {
  const mutationOptions = getSignUpSocialMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Ïù¥Î©îÏùºÍ≥º ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏÇ¨Ïö©Ìïú ÏùºÎ∞ò ÌöåÏõêÍ∞ÄÏûÖÏùÑ ÏßÑÌñâÌï©ÎãàÎã§.

ÌöåÏõêÍ∞ÄÏûÖ ÏÑ±Í≥µ Ïãú:
- ÏûêÎèôÏúºÎ°ú Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨
- accessTokenÍ≥º refreshTokenÏùÑ ÏùëÎãµ Î∞îÎîîÏóê Î∞òÌôò

Î∞òÌôòÎêòÎäî ÌÜ†ÌÅ∞:
- accessToken: API Ìò∏Ï∂ú Ïãú Authorization Ìó§ÎçîÏóê Bearer ÌòïÏãùÏúºÎ°ú ÏÇ¨Ïö©
- refreshToken: ÌÜ†ÌÅ∞ Í∞±Ïã† Ïãú ÏÇ¨Ïö©
- ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ (userId, email, nickname Îì±)

ÎîîÎ∞îÏù¥Ïä§ Í¥ÄÎ¶¨:
- Îã§Ï§ë Í∏∞Í∏∞ Î°úÍ∑∏Ïù∏ ÏßÄÏõêÏùÑ ÏúÑÌï¥ X-Device-ID Ìó§ÎçîÎ•º ÏÑ†ÌÉùÏ†ÅÏúºÎ°ú Ï†ÑÏÜ° Í∞ÄÎä•
- ÌîÑÎ°†Ìä∏ÏóîÎìúÏóêÏÑú UUID ÏÉùÏÑ± ÌõÑ Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóê Ï†ÄÏû•ÌïòÏó¨ ÏÇ¨Ïö© Í∂åÏû•

ÏÇ¨Ï†Ñ ÏöîÍµ¨ÏÇ¨Ìï≠:
- Ïù¥Î©îÏùº Ïù∏Ï¶ù ÏôÑÎ£å (/api/v1/auth/email/verify-code)
 * @summary ÏùºÎ∞ò ÌöåÏõêÍ∞ÄÏûÖ
 */
export type signUpLocalResponse201 = {
  data: SuccessResponseSignUpResponse;
  status: 201;
};

export type signUpLocalResponseSuccess = signUpLocalResponse201 & {
  headers: Headers;
};

export type signUpLocalResponse = signUpLocalResponseSuccess;

export const getSignUpLocalUrl = () => {
  return `https://dev.nugudi.com/api/v1/auth/signup/local`;
};

export const signUpLocal = async (
  signUpLocalRequest: SignUpLocalRequest,
  options?: RequestInit,
): Promise<signUpLocalResponse> => {
  return http<signUpLocalResponse>(getSignUpLocalUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(signUpLocalRequest),
  });
};

export const getSignUpLocalMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof signUpLocal>>,
    TError,
    { data: SignUpLocalRequest },
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof signUpLocal>>,
  TError,
  { data: SignUpLocalRequest },
  TContext
> => {
  const mutationKey = ["signUpLocal"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof signUpLocal>>,
    { data: SignUpLocalRequest }
  > = (props) => {
    const { data } = props ?? {};

    return signUpLocal(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SignUpLocalMutationResult = NonNullable<
  Awaited<ReturnType<typeof signUpLocal>>
>;
export type SignUpLocalMutationBody = SignUpLocalRequest;
export type SignUpLocalMutationError = unknown;

/**
 * @summary ÏùºÎ∞ò ÌöåÏõêÍ∞ÄÏûÖ
 */
export const useSignUpLocal = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof signUpLocal>>,
      TError,
      { data: SignUpLocalRequest },
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof signUpLocal>>,
  TError,
  { data: SignUpLocalRequest },
  TContext
> => {
  const mutationOptions = getSignUpLocalMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Î¶¨ÌîÑÎ†àÏãú ÌÜ†ÌÅ∞ÏúºÎ°ú ÏÉàÎ°úÏö¥ ÌÜ†ÌÅ∞ÏùÑ Î∞úÍ∏âÎ∞õÏäµÎãàÎã§.

ÌïÑÏàò Ìó§Îçî:
- Authorization: Bearer {refreshToken} ÌòïÏãùÏúºÎ°ú Î¶¨ÌîÑÎ†àÏãú ÌÜ†ÌÅ∞ Ï†ÑÎã¨
- X-Device-ID: ÌÜ†ÌÅ∞ÏùÑ Í∞±Ïã†Ìï† ÎîîÎ∞îÏù¥Ïä§Ïùò Í≥†Ïú† ID

ÎîîÎ∞îÏù¥Ïä§ ID Í¥ÄÎ¶¨:
- Î°úÍ∑∏Ïù∏ Ïãú ÏÇ¨Ïö©Ìïú ÎèôÏùºÌïú ÎîîÎ∞îÏù¥Ïä§ IDÎ•º Ï†ÑÎã¨Ìï¥Ïïº Ìï®
- Îã§Î•∏ ÎîîÎ∞îÏù¥Ïä§ IDÎ°ú Í∞±Ïã† ÏãúÎèÑ Ïãú Ïã§Ìå®

Î∞òÌôò ÎÇ¥Ïö©:
- ÏÉàÎ°úÏö¥ accessTokenÍ≥º refreshToken
 * @summary JWT ÌÜ†ÌÅ∞ Í∞±Ïã†
 */
export type refreshTokenResponse200 = {
  data: SuccessResponseRefreshTokenResponse;
  status: 200;
};

export type refreshTokenResponseSuccess = refreshTokenResponse200 & {
  headers: Headers;
};

export type refreshTokenResponse = refreshTokenResponseSuccess;

export const getRefreshTokenUrl = () => {
  return `https://dev.nugudi.com/api/v1/auth/refresh`;
};

export const refreshToken = async (
  options?: RequestInit,
): Promise<refreshTokenResponse> => {
  return http<refreshTokenResponse>(getRefreshTokenUrl(), {
    ...options,
    method: "POST",
  });
};

export const getRefreshTokenMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof refreshToken>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof refreshToken>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["refreshToken"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof refreshToken>>,
    void
  > = () => {
    return refreshToken(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RefreshTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof refreshToken>>
>;

export type RefreshTokenMutationError = unknown;

/**
 * @summary JWT ÌÜ†ÌÅ∞ Í∞±Ïã†
 */
export const useRefreshToken = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof refreshToken>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof refreshToken>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getRefreshTokenMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * ÌòÑÏû¨ Í∏∞Í∏∞ÏóêÏÑú Î°úÍ∑∏ÏïÑÏõÉÌï©ÎãàÎã§.

ÌïÑÏàò Ìó§Îçî:
- Authorization: Bearer {accessToken} - ÌòÑÏû¨ ÏÇ¨Ïö© Ï§ëÏù∏ Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞
- X-Refresh-Token: ÌòÑÏû¨ ÎîîÎ∞îÏù¥Ïä§Ïùò Î¶¨ÌîÑÎ†àÏãú ÌÜ†ÌÅ∞
- X-Device-ID: Î°úÍ∑∏Ïù∏ Ïãú ÏÇ¨Ïö©Ìïú ÎîîÎ∞îÏù¥Ïä§ Í≥†Ïú† ID

ÎîîÎ∞îÏù¥Ïä§ ID Í¥ÄÎ¶¨:
- ÌîÑÎ°†Ìä∏ÏóîÎìúÏóêÏÑú UUID.randomUUID() Îì±ÏúºÎ°ú ÏÉùÏÑ±
- Ïõπ: localStorage, Î™®Î∞îÏùº Ïï±: SecureStorage Îì±Ïóê Ï†ÄÏû•
- Î°úÍ∑∏Ïù∏ Ïãú ÏÉùÏÑ±/Ï†ÄÏû•Ìïú ÎèôÏùºÌïú IDÎ•º Î°úÍ∑∏ÏïÑÏõÉ ÏãúÏóêÎèÑ ÏÇ¨Ïö©

ÎèôÏûë Î∞©Ïãù:
- Ìï¥Îãπ ÎîîÎ∞îÏù¥Ïä§Ïùò ÏÑ∏ÏÖòÎßå Ï¢ÖÎ£å (Îã§Î•∏ Í∏∞Í∏∞Îäî Ïú†ÏßÄ)
- Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞ÏùÄ Î∏îÎûôÎ¶¨Ïä§Ìä∏Ïóê Ï∂îÍ∞Ä
- Î¶¨ÌîÑÎ†àÏãú ÌÜ†ÌÅ∞ÏùÄ Î¨¥Ìö®Ìôî
 * @summary Î°úÍ∑∏ÏïÑÏõÉ
 */
export type logoutResponse200 = {
  data: SuccessResponseLogoutResponse;
  status: 200;
};

export type logoutResponseSuccess = logoutResponse200 & {
  headers: Headers;
};

export type logoutResponse = logoutResponseSuccess;

export const getLogoutUrl = () => {
  return `https://dev.nugudi.com/api/v1/auth/logout`;
};

export const logout = async (
  options?: RequestInit,
): Promise<logoutResponse> => {
  return http<logoutResponse>(getLogoutUrl(), {
    ...options,
    method: "POST",
  });
};

export const getLogoutMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof logout>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof logout>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["logout"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof logout>>,
    void
  > = () => {
    return logout(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type LogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof logout>>
>;

export type LogoutMutationError = unknown;

/**
 * @summary Î°úÍ∑∏ÏïÑÏõÉ
 */
export const useLogout = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof logout>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof logout>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getLogoutMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * ÎÑ§Ïù¥Î≤ÑÎ°úÎ∂ÄÌÑ∞ Ï†ÑÎã¨Î∞õÏùÄ Ïù∏Í∞Ä ÏΩîÎìúÏôÄ redirect URIÎ•º Î∞±ÏóîÎìúÏóê Ï†ÑÎã¨ÌïòÏó¨ Î°úÍ∑∏Ïù∏ÏùÑ Ï≤òÎ¶¨Ìï©ÎãàÎã§.

ÏÇ¨Ïö© Î∞©Î≤ï:
1. Ïù∏Í∞Ä URL Ï°∞Ìöå APIÎ°ú redirect_uriÎ•º Ìè¨Ìï®Ìïú ÎÑ§Ïù¥Î≤Ñ Ïù∏Ï¶ù URL ÌöçÎìù
2. ÏÇ¨Ïö©ÏûêÎ•º ÎÑ§Ïù¥Î≤Ñ Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏
3. ÎÑ§Ïù¥Î≤Ñ Ïù∏Ï¶ù ÏôÑÎ£å ÌõÑ ÌîÑÎ°†Ìä∏ÏóîÎìú redirect_uriÎ°ú Ïù∏Í∞Ä ÏΩîÎìú(code) ÏàòÏã†
4. Ïù¥ APIÏóê codeÏôÄ ÎèôÏùºÌïú redirect_uriÎ•º Ìï®Íªò Ï†ÑÎã¨

Î∞òÌôò ÏÉÅÌÉú:
- Í∏∞Ï°¥ ÌöåÏõê (200 OK): accessTokenÍ≥º refreshTokenÏùÑ ÏùëÎãµ Î∞îÎîîÏóê Î∞òÌôò
- Ïã†Í∑ú ÌöåÏõê (202 ACCEPTED): registrationTokenÏùÑ ÏùëÎãµ Î∞îÎîîÏóê Î∞òÌôò

Ïã†Í∑ú ÌöåÏõêÏùò Í≤ΩÏö∞:
1. Î∞òÌôòÎ∞õÏùÄ registrationTokenÏùÑ Ï†ÄÏû•
2. /api/v1/auth/signup/social ÏóîÎìúÌè¨Ïù∏Ìä∏ Ìò∏Ï∂ú Ïãú X-Registration-Token Ìó§ÎçîÏóê Ìï¥Îãπ ÌÜ†ÌÅ∞ÏùÑ Ìè¨Ìï®
3. Ï∂îÍ∞Ä Ï†ïÎ≥¥(ÎãâÎÑ§ÏûÑ Îì±) ÏûÖÎ†• ÌõÑ ÌöåÏõêÍ∞ÄÏûÖ ÏôÑÎ£å

Ï£ºÏùòÏÇ¨Ìï≠:
- redirect_uriÎäî Ïù∏Í∞Ä URL Ï°∞Ìöå Ïãú ÏÇ¨Ïö©Ìïú Í∞íÍ≥º Ï†ïÌôïÌûà ÏùºÏπòÌï¥Ïïº Ìï©ÎãàÎã§
- Î∂àÏùºÏπò Ïãú ÎÑ§Ïù¥Î≤Ñ API Ìò∏Ï∂úÏù¥ Ïã§Ìå®Ìï©ÎãàÎã§
 * @summary ÎÑ§Ïù¥Î≤Ñ ÏÜåÏÖú Î°úÍ∑∏Ïù∏
 */
export type naverLoginResponse200 = {
  data: SuccessResponseSocialLoginResponse;
  status: 200;
};

export type naverLoginResponseSuccess = naverLoginResponse200 & {
  headers: Headers;
};

export type naverLoginResponse = naverLoginResponseSuccess;

export const getNaverLoginUrl = () => {
  return `https://dev.nugudi.com/api/v1/auth/login/naver`;
};

export const naverLogin = async (
  naverLoginRequest: NaverLoginRequest,
  options?: RequestInit,
): Promise<naverLoginResponse> => {
  return http<naverLoginResponse>(getNaverLoginUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(naverLoginRequest),
  });
};

export const getNaverLoginMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof naverLogin>>,
    TError,
    { data: NaverLoginRequest },
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof naverLogin>>,
  TError,
  { data: NaverLoginRequest },
  TContext
> => {
  const mutationKey = ["naverLogin"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof naverLogin>>,
    { data: NaverLoginRequest }
  > = (props) => {
    const { data } = props ?? {};

    return naverLogin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type NaverLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof naverLogin>>
>;
export type NaverLoginMutationBody = NaverLoginRequest;
export type NaverLoginMutationError = unknown;

/**
 * @summary ÎÑ§Ïù¥Î≤Ñ ÏÜåÏÖú Î°úÍ∑∏Ïù∏
 */
export const useNaverLogin = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof naverLogin>>,
      TError,
      { data: NaverLoginRequest },
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof naverLogin>>,
  TError,
  { data: NaverLoginRequest },
  TContext
> => {
  const mutationOptions = getNaverLoginMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Ïù¥Î©îÏùºÍ≥º ÎπÑÎ∞ÄÎ≤àÌò∏Î°ú Î°úÍ∑∏Ïù∏Ìï©ÎãàÎã§.

Î∞òÌôò ÎÇ¥Ïö©:
- accessToken: API Ìò∏Ï∂ú Ïãú Authorization Ìó§ÎçîÏóê Bearer ÌòïÏãùÏúºÎ°ú ÏÇ¨Ïö©
- refreshToken: ÌÜ†ÌÅ∞ Í∞±Ïã† Ïãú ÏÇ¨Ïö©, ÏïàÏ†ÑÌïòÍ≤å Ï†ÄÏû• ÌïÑÏöî
- ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ (userId, email, nickname Îì±)

ÎîîÎ∞îÏù¥Ïä§ Í¥ÄÎ¶¨:
- Îã§Ï§ë Í∏∞Í∏∞ Î°úÍ∑∏Ïù∏ ÏßÄÏõêÏùÑ ÏúÑÌï¥ X-Device-ID Ìó§ÎçîÎ•º ÏÑ†ÌÉùÏ†ÅÏúºÎ°ú Ï†ÑÏÜ° Í∞ÄÎä•
- ÌîÑÎ°†Ìä∏ÏóîÎìúÏóêÏÑú UUID ÏÉùÏÑ± ÌõÑ Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóê Ï†ÄÏû•ÌïòÏó¨ ÏÇ¨Ïö© Í∂åÏû•
 * @summary ÏùºÎ∞ò Î°úÍ∑∏Ïù∏
 */
export type localLoginResponse200 = {
  data: SuccessResponseLocalLoginResponse;
  status: 200;
};

export type localLoginResponseSuccess = localLoginResponse200 & {
  headers: Headers;
};

export type localLoginResponse = localLoginResponseSuccess;

export const getLocalLoginUrl = () => {
  return `https://dev.nugudi.com/api/v1/auth/login/local`;
};

export const localLogin = async (
  localLoginRequest: LocalLoginRequest,
  options?: RequestInit,
): Promise<localLoginResponse> => {
  return http<localLoginResponse>(getLocalLoginUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(localLoginRequest),
  });
};

export const getLocalLoginMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof localLogin>>,
    TError,
    { data: LocalLoginRequest },
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof localLogin>>,
  TError,
  { data: LocalLoginRequest },
  TContext
> => {
  const mutationKey = ["localLogin"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof localLogin>>,
    { data: LocalLoginRequest }
  > = (props) => {
    const { data } = props ?? {};

    return localLogin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type LocalLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof localLogin>>
>;
export type LocalLoginMutationBody = LocalLoginRequest;
export type LocalLoginMutationError = unknown;

/**
 * @summary ÏùºÎ∞ò Î°úÍ∑∏Ïù∏
 */
export const useLocalLogin = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof localLogin>>,
      TError,
      { data: LocalLoginRequest },
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof localLogin>>,
  TError,
  { data: LocalLoginRequest },
  TContext
> => {
  const mutationOptions = getLocalLoginMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Ïπ¥Ïπ¥Ïò§Î°úÎ∂ÄÌÑ∞ Ï†ÑÎã¨Î∞õÏùÄ Ïù∏Í∞Ä ÏΩîÎìúÏôÄ redirect URIÎ•º Î∞±ÏóîÎìúÏóê Ï†ÑÎã¨ÌïòÏó¨ Î°úÍ∑∏Ïù∏ÏùÑ Ï≤òÎ¶¨Ìï©ÎãàÎã§.

ÏÇ¨Ïö© Î∞©Î≤ï:
1. Ïù∏Í∞Ä URL Ï°∞Ìöå APIÎ°ú redirect_uriÎ•º Ìè¨Ìï®Ìïú Ïπ¥Ïπ¥Ïò§ Ïù∏Ï¶ù URL ÌöçÎìù
2. ÏÇ¨Ïö©ÏûêÎ•º Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏
3. Ïπ¥Ïπ¥Ïò§ Ïù∏Ï¶ù ÏôÑÎ£å ÌõÑ ÌîÑÎ°†Ìä∏ÏóîÎìú redirect_uriÎ°ú Ïù∏Í∞Ä ÏΩîÎìú(code) ÏàòÏã†
4. Ïù¥ APIÏóê codeÏôÄ ÎèôÏùºÌïú redirect_uriÎ•º Ìï®Íªò Ï†ÑÎã¨

Î∞òÌôò ÏÉÅÌÉú:
- Í∏∞Ï°¥ ÌöåÏõê (200 OK): accessTokenÍ≥º refreshTokenÏùÑ ÏùëÎãµ Î∞îÎîîÏóê Î∞òÌôò
- Ïã†Í∑ú ÌöåÏõê (202 ACCEPTED): registrationTokenÏùÑ ÏùëÎãµ Î∞îÎîîÏóê Î∞òÌôò

Ïã†Í∑ú ÌöåÏõêÏùò Í≤ΩÏö∞:
1. Î∞òÌôòÎ∞õÏùÄ registrationTokenÏùÑ Ï†ÄÏû•
2. /api/v1/auth/signup/social ÏóîÎìúÌè¨Ïù∏Ìä∏ Ìò∏Ï∂ú Ïãú X-Registration-Token Ìó§ÎçîÏóê Ìï¥Îãπ ÌÜ†ÌÅ∞ÏùÑ Ìè¨Ìï®
3. Ï∂îÍ∞Ä Ï†ïÎ≥¥(ÎãâÎÑ§ÏûÑ Îì±) ÏûÖÎ†• ÌõÑ ÌöåÏõêÍ∞ÄÏûÖ ÏôÑÎ£å

Ï£ºÏùòÏÇ¨Ìï≠:
- redirect_uriÎäî Ïù∏Í∞Ä URL Ï°∞Ìöå Ïãú ÏÇ¨Ïö©Ìïú Í∞íÍ≥º Ï†ïÌôïÌûà ÏùºÏπòÌï¥Ïïº Ìï©ÎãàÎã§
- Î∂àÏùºÏπò Ïãú Ïπ¥Ïπ¥Ïò§ API Ìò∏Ï∂úÏù¥ Ïã§Ìå®Ìï©ÎãàÎã§
 * @summary Ïπ¥Ïπ¥Ïò§ ÏÜåÏÖú Î°úÍ∑∏Ïù∏
 */
export type kakaoLoginResponse200 = {
  data: SuccessResponseSocialLoginResponse;
  status: 200;
};

export type kakaoLoginResponseSuccess = kakaoLoginResponse200 & {
  headers: Headers;
};

export type kakaoLoginResponse = kakaoLoginResponseSuccess;

export const getKakaoLoginUrl = () => {
  return `https://dev.nugudi.com/api/v1/auth/login/kakao`;
};

export const kakaoLogin = async (
  kakaoLoginRequest: KakaoLoginRequest,
  options?: RequestInit,
): Promise<kakaoLoginResponse> => {
  return http<kakaoLoginResponse>(getKakaoLoginUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(kakaoLoginRequest),
  });
};

export const getKakaoLoginMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof kakaoLogin>>,
    TError,
    { data: KakaoLoginRequest },
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof kakaoLogin>>,
  TError,
  { data: KakaoLoginRequest },
  TContext
> => {
  const mutationKey = ["kakaoLogin"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof kakaoLogin>>,
    { data: KakaoLoginRequest }
  > = (props) => {
    const { data } = props ?? {};

    return kakaoLogin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KakaoLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof kakaoLogin>>
>;
export type KakaoLoginMutationBody = KakaoLoginRequest;
export type KakaoLoginMutationError = unknown;

/**
 * @summary Ïπ¥Ïπ¥Ïò§ ÏÜåÏÖú Î°úÍ∑∏Ïù∏
 */
export const useKakaoLogin = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof kakaoLogin>>,
      TError,
      { data: KakaoLoginRequest },
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof kakaoLogin>>,
  TError,
  { data: KakaoLoginRequest },
  TContext
> => {
  const mutationOptions = getKakaoLoginMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Íµ¨Í∏ÄÎ°úÎ∂ÄÌÑ∞ Ï†ÑÎã¨Î∞õÏùÄ Ïù∏Í∞Ä ÏΩîÎìúÏôÄ redirect URIÎ•º Î∞±ÏóîÎìúÏóê Ï†ÑÎã¨ÌïòÏó¨ Î°úÍ∑∏Ïù∏ÏùÑ Ï≤òÎ¶¨Ìï©ÎãàÎã§.

ÏÇ¨Ïö© Î∞©Î≤ï:
1. Ïù∏Í∞Ä URL Ï°∞Ìöå APIÎ°ú redirect_uriÎ•º Ìè¨Ìï®Ìïú Íµ¨Í∏Ä Ïù∏Ï¶ù URL ÌöçÎìù
2. ÏÇ¨Ïö©ÏûêÎ•º Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏
3. Íµ¨Í∏Ä Ïù∏Ï¶ù ÏôÑÎ£å ÌõÑ ÌîÑÎ°†Ìä∏ÏóîÎìú redirect_uriÎ°ú Ïù∏Í∞Ä ÏΩîÎìú(code) ÏàòÏã†
4. Ïù¥ APIÏóê codeÏôÄ ÎèôÏùºÌïú redirect_uriÎ•º Ìï®Íªò Ï†ÑÎã¨

Î∞òÌôò ÏÉÅÌÉú:
- Í∏∞Ï°¥ ÌöåÏõê (200 OK): accessTokenÍ≥º refreshTokenÏùÑ ÏùëÎãµ Î∞îÎîîÏóê Î∞òÌôò
- Ïã†Í∑ú ÌöåÏõê (202 ACCEPTED): registrationTokenÏùÑ ÏùëÎãµ Î∞îÎîîÏóê Î∞òÌôò

Ïã†Í∑ú ÌöåÏõêÏùò Í≤ΩÏö∞:
1. Î∞òÌôòÎ∞õÏùÄ registrationTokenÏùÑ Ï†ÄÏû•
2. /api/v1/auth/signup/social ÏóîÎìúÌè¨Ïù∏Ìä∏ Ìò∏Ï∂ú Ïãú X-Registration-Token Ìó§ÎçîÏóê Ìï¥Îãπ ÌÜ†ÌÅ∞ÏùÑ Ìè¨Ìï®
3. Ï∂îÍ∞Ä Ï†ïÎ≥¥(ÎãâÎÑ§ÏûÑ Îì±) ÏûÖÎ†• ÌõÑ ÌöåÏõêÍ∞ÄÏûÖ ÏôÑÎ£å

Ï£ºÏùòÏÇ¨Ìï≠:
- redirect_uriÎäî Ïù∏Í∞Ä URL Ï°∞Ìöå Ïãú ÏÇ¨Ïö©Ìïú Í∞íÍ≥º Ï†ïÌôïÌûà ÏùºÏπòÌï¥Ïïº Ìï©ÎãàÎã§
- Î∂àÏùºÏπò Ïãú Íµ¨Í∏Ä API Ìò∏Ï∂úÏù¥ Ïã§Ìå®Ìï©ÎãàÎã§
 * @summary Íµ¨Í∏Ä ÏÜåÏÖú Î°úÍ∑∏Ïù∏
 */
export type googleLoginResponse200 = {
  data: SuccessResponseSocialLoginResponse;
  status: 200;
};

export type googleLoginResponseSuccess = googleLoginResponse200 & {
  headers: Headers;
};

export type googleLoginResponse = googleLoginResponseSuccess;

export const getGoogleLoginUrl = () => {
  return `https://dev.nugudi.com/api/v1/auth/login/google`;
};

export const googleLogin = async (
  googleLoginRequest: GoogleLoginRequest,
  options?: RequestInit,
): Promise<googleLoginResponse> => {
  return http<googleLoginResponse>(getGoogleLoginUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(googleLoginRequest),
  });
};

export const getGoogleLoginMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof googleLogin>>,
    TError,
    { data: GoogleLoginRequest },
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof googleLogin>>,
  TError,
  { data: GoogleLoginRequest },
  TContext
> => {
  const mutationKey = ["googleLogin"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof googleLogin>>,
    { data: GoogleLoginRequest }
  > = (props) => {
    const { data } = props ?? {};

    return googleLogin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type GoogleLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof googleLogin>>
>;
export type GoogleLoginMutationBody = GoogleLoginRequest;
export type GoogleLoginMutationError = unknown;

/**
 * @summary Íµ¨Í∏Ä ÏÜåÏÖú Î°úÍ∑∏Ïù∏
 */
export const useGoogleLogin = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof googleLogin>>,
      TError,
      { data: GoogleLoginRequest },
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof googleLogin>>,
  TError,
  { data: GoogleLoginRequest },
  TContext
> => {
  const mutationOptions = getGoogleLoginMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Î∞úÏÜ°Îêú 6ÏûêÎ¶¨ Ïù∏Ï¶ù ÏΩîÎìúÎ•º ÌôïÏù∏Ìï©ÎãàÎã§.

Ïù∏Ï¶ù ÏÑ±Í≥µ Ïãú:
- Ìï¥Îãπ Ïù¥Î©îÏùºÏù¥ Ïù∏Ï¶ù ÏôÑÎ£å ÏÉÅÌÉúÎ°ú Î≥ÄÍ≤Ω
- isVerified: true Î∞òÌôò

Ïù∏Ï¶ù ÌõÑ Í∞ÄÎä•Ìïú ÏûëÏóÖ:
- SIGNUP Î™©Ï†Å: /api/v1/auth/signup/localÎ°ú ÌöåÏõêÍ∞ÄÏûÖ ÏßÑÌñâ
- RESET_PASSWORD Î™©Ï†Å: ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï API Ìò∏Ï∂ú

Ï£ºÏùòÏÇ¨Ìï≠:
- ÏΩîÎìúÎäî 5Î∂Ñ ÎÇ¥Ïóê ÏûÖÎ†•Ìï¥Ïïº Ìï®
- 3Ìöå Ïù¥ÏÉÅ ÏûòÎ™ªÎêú ÏΩîÎìú ÏûÖÎ†• Ïãú ÏÉàÎ°úÏö¥ ÏΩîÎìú Î∞úÏÜ° ÌïÑÏöî
- Ïù∏Ï¶ù ÏôÑÎ£å ÌõÑ 30Î∂Ñ ÎÇ¥Ïóê ÌöåÏõêÍ∞ÄÏûÖ/ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ïÏùÑ ÏôÑÎ£åÌï¥Ïïº Ìï®
 * @summary Ïù¥Î©îÏùº Ïù∏Ï¶ù ÏΩîÎìú ÌôïÏù∏
 */
export type verifyEmailCodeResponse200 = {
  data: SuccessResponseEmailVerifyResponse;
  status: 200;
};

export type verifyEmailCodeResponseSuccess = verifyEmailCodeResponse200 & {
  headers: Headers;
};

export type verifyEmailCodeResponse = verifyEmailCodeResponseSuccess;

export const getVerifyEmailCodeUrl = () => {
  return `https://dev.nugudi.com/api/v1/auth/email/verify-code`;
};

export const verifyEmailCode = async (
  emailVerifyRequest: EmailVerifyRequest,
  options?: RequestInit,
): Promise<verifyEmailCodeResponse> => {
  return http<verifyEmailCodeResponse>(getVerifyEmailCodeUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(emailVerifyRequest),
  });
};

export const getVerifyEmailCodeMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof verifyEmailCode>>,
    TError,
    { data: EmailVerifyRequest },
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof verifyEmailCode>>,
  TError,
  { data: EmailVerifyRequest },
  TContext
> => {
  const mutationKey = ["verifyEmailCode"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof verifyEmailCode>>,
    { data: EmailVerifyRequest }
  > = (props) => {
    const { data } = props ?? {};

    return verifyEmailCode(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type VerifyEmailCodeMutationResult = NonNullable<
  Awaited<ReturnType<typeof verifyEmailCode>>
>;
export type VerifyEmailCodeMutationBody = EmailVerifyRequest;
export type VerifyEmailCodeMutationError = unknown;

/**
 * @summary Ïù¥Î©îÏùº Ïù∏Ï¶ù ÏΩîÎìú ÌôïÏù∏
 */
export const useVerifyEmailCode = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof verifyEmailCode>>,
      TError,
      { data: EmailVerifyRequest },
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof verifyEmailCode>>,
  TError,
  { data: EmailVerifyRequest },
  TContext
> => {
  const mutationOptions = getVerifyEmailCodeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * 6ÏûêÎ¶¨ Ïù∏Ï¶ù ÏΩîÎìúÎ•º Ïù¥Î©îÏùºÎ°ú Î∞úÏÜ°Ìï©ÎãàÎã§.

ÏÇ¨Ïö© Î™©Ï†Å(purpose):
- SIGNUP: ÌöåÏõêÍ∞ÄÏûÖ Ïãú Ïù¥Î©îÏùº ÏÜåÏú† ÌôïÏù∏
- RESET_PASSWORD: ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï Ïãú Î≥∏Ïù∏ ÌôïÏù∏

Ïû¨Ï†ÑÏÜ°Ïù¥ ÌïÑÏöîÌïú Í≤ΩÏö∞:
- Ïù¥Î©îÏùºÏùÑ Î∞õÏßÄ Î™ªÌïú Í≤ΩÏö∞ (Ïä§Ìå∏Ìï® ÌôïÏù∏ ÌïÑÏöî)
- 5Î∂ÑÏù¥ ÏßÄÎÇò ÏΩîÎìúÍ∞Ä ÎßåÎ£åÎêú Í≤ΩÏö∞
- 3Ìöå Ïù¥ÏÉÅ ÏûòÎ™ªÎêú ÏΩîÎìúÎ•º ÏûÖÎ†•Ìïú Í≤ΩÏö∞
- Í∏∞Ï°¥ ÏΩîÎìúÎ•º Î∂ÑÏã§Ìïú Í≤ΩÏö∞

Ïû¨Ï†ÑÏÜ° Ïãú ÎèôÏûë:
- Í∏∞Ï°¥ ÏΩîÎìúÎäî Ï¶âÏãú Î¨¥Ìö®ÌôîÎê®
- ÏÉàÎ°úÏö¥ 6ÏûêÎ¶¨ ÏΩîÎìúÍ∞Ä ÏÉùÏÑ±ÎêòÏñ¥ Î∞úÏÜ°Îê®
- ÏÉà ÏΩîÎìúÎ°úÎßå Ïù∏Ï¶ù Í∞ÄÎä• (Ïù¥Ï†Ñ ÏΩîÎìú ÏÇ¨Ïö© Î∂àÍ∞Ä)

Ï†úÌïú ÏÇ¨Ìï≠:
- ÎèôÏùº Ïù¥Î©îÏùºÎ°ú 1ÏãúÍ∞Ñ ÎÇ¥ ÏµúÎåÄ 5Ìöå Î∞úÏÜ° Í∞ÄÎä•
- Ïû¨Ï†ÑÏÜ°ÏùÄ ÎßàÏßÄÎßâ ÏΩîÎìú Î∞úÏÜ°ÏúºÎ°úÎ∂ÄÌÑ∞ 1Î∂Ñ ÌõÑ Ïû¨Ï†ÑÏÜ° Í∞ÄÎä• (Ïø®Îã§Ïö¥ ÏãúÍ∞Ñ)
- Ïù∏Ï¶ù ÏΩîÎìúÎäî 5Î∂ÑÍ∞Ñ Ïú†Ìö®

Î∞úÏÜ° ÌõÑ ÌîÑÎ°úÏÑ∏Ïä§:
1. Ïù¥Î©îÏùºÎ°ú Ï†ÑÏÜ°Îêú 6ÏûêÎ¶¨ ÏΩîÎìú ÌôïÏù∏
2. /api/v1/auth/email/verify-codeÎ°ú ÏΩîÎìú Í≤ÄÏ¶ù
3. ÌöåÏõêÍ∞ÄÏûÖ ÎòêÎäî ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï ÏßÑÌñâ
 * @summary Ïù¥Î©îÏùº Ïù∏Ï¶ù ÏΩîÎìú Î∞úÏÜ°
 */
export type sendEmailVerificationCodeResponse200 = {
  data: SendEmailVerificationCode200;
  status: 200;
};

export type sendEmailVerificationCodeResponseSuccess =
  sendEmailVerificationCodeResponse200 & {
    headers: Headers;
  };

export type sendEmailVerificationCodeResponse =
  sendEmailVerificationCodeResponseSuccess;

export const getSendEmailVerificationCodeUrl = () => {
  return `https://dev.nugudi.com/api/v1/auth/email/send-code`;
};

export const sendEmailVerificationCode = async (
  emailVerificationRequest: EmailVerificationRequest,
  options?: RequestInit,
): Promise<sendEmailVerificationCodeResponse> => {
  return http<sendEmailVerificationCodeResponse>(
    getSendEmailVerificationCodeUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(emailVerificationRequest),
    },
  );
};

export const getSendEmailVerificationCodeMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sendEmailVerificationCode>>,
    TError,
    { data: EmailVerificationRequest },
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof sendEmailVerificationCode>>,
  TError,
  { data: EmailVerificationRequest },
  TContext
> => {
  const mutationKey = ["sendEmailVerificationCode"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof sendEmailVerificationCode>>,
    { data: EmailVerificationRequest }
  > = (props) => {
    const { data } = props ?? {};

    return sendEmailVerificationCode(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SendEmailVerificationCodeMutationResult = NonNullable<
  Awaited<ReturnType<typeof sendEmailVerificationCode>>
>;
export type SendEmailVerificationCodeMutationBody = EmailVerificationRequest;
export type SendEmailVerificationCodeMutationError = unknown;

/**
 * @summary Ïù¥Î©îÏùº Ïù∏Ï¶ù ÏΩîÎìú Î∞úÏÜ°
 */
export const useSendEmailVerificationCode = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof sendEmailVerificationCode>>,
      TError,
      { data: EmailVerificationRequest },
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof sendEmailVerificationCode>>,
  TError,
  { data: EmailVerificationRequest },
  TContext
> => {
  const mutationOptions = getSendEmailVerificationCodeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * ÏÉàÎ°úÏö¥ Íµ¨ÎÇ¥ÏãùÎãπÏùÑ Îì±Î°ùÌï©ÎãàÎã§.

ÌïÑÏàò Ï†ïÎ≥¥:
- Ïù¥Î¶Ñ (2~100Ïûê)
- Ï£ºÏÜå (ÏµúÎåÄ 255Ïûê)
- ÏÉÅÏÑ∏ Ï£ºÏÜå (ÏµúÎåÄ 100Ïûê)
- ÏòÅÏóÖ ÏöîÏùº (businessHours.operatingDays)
- Ìè¨Ïû• Í∞ÄÎä• Ïó¨Î∂Ä (takeoutAvailable)

ÏÑ†ÌÉù Ï†ïÎ≥¥:
- ÏúÑÎèÑ/Í≤ΩÎèÑ
- Ï†ÑÌôîÎ≤àÌò∏ (ÌòïÏãù: 02-1234-5678)
- ÏÑ§Î™Ö (ÏµúÎåÄ 1000Ïûê)
- Ìïú Ï§Ñ ÏÜåÍ∞ú (ÏµúÎåÄ 200Ïûê)
- ÏãùÍ∂å Í∞ÄÍ≤© (0~50,000Ïõê)
- ÎåÄÌëú Ïù¥ÎØ∏ÏßÄ ÌååÏùº ID
- ÏòÅÏóÖÏãúÍ∞Ñ Ï†ïÎ≥¥ (businessHours)
  - Ï†êÏã¨ ÏãúÍ∞Ñ (lunchStartTime, lunchEndTime)
  - Ï†ÄÎÖÅ ÏãúÍ∞Ñ (dinnerStartTime, dinnerEndTime)
  - ÌäπÎ≥Ñ Ìú¥Î¨¥Ïùº (specialHolidays)
  - ÎπÑÍ≥† (note)

Îì±Î°ù ÏôÑÎ£å Ïãú:
- Íµ¨ÎÇ¥ÏãùÎãπ ID Î∞òÌôò
- Îì±Î°ùÎêú Î™®Îì† Ï†ïÎ≥¥ Î∞òÌôò
- ÏÉùÏÑ± ÏùºÏãú Î∞òÌôò
 * @summary Íµ¨ÎÇ¥ÏãùÎãπ Îì±Î°ù
 */
export type registerCafeteriaResponse201 = {
  data: SuccessResponseRegisterCafeteriaResponse;
  status: 201;
};

export type registerCafeteriaResponseSuccess = registerCafeteriaResponse201 & {
  headers: Headers;
};

export type registerCafeteriaResponse = registerCafeteriaResponseSuccess;

export const getRegisterCafeteriaUrl = () => {
  return `https://dev.nugudi.com/api/v1/admin/cafeterias`;
};

export const registerCafeteria = async (
  registerCafeteriaRequest: RegisterCafeteriaRequest,
  options?: RequestInit,
): Promise<registerCafeteriaResponse> => {
  return http<registerCafeteriaResponse>(getRegisterCafeteriaUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(registerCafeteriaRequest),
  });
};

export const getRegisterCafeteriaMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registerCafeteria>>,
    TError,
    { data: RegisterCafeteriaRequest },
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof registerCafeteria>>,
  TError,
  { data: RegisterCafeteriaRequest },
  TContext
> => {
  const mutationKey = ["registerCafeteria"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof registerCafeteria>>,
    { data: RegisterCafeteriaRequest }
  > = (props) => {
    const { data } = props ?? {};

    return registerCafeteria(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RegisterCafeteriaMutationResult = NonNullable<
  Awaited<ReturnType<typeof registerCafeteria>>
>;
export type RegisterCafeteriaMutationBody = RegisterCafeteriaRequest;
export type RegisterCafeteriaMutationError = unknown;

/**
 * @summary Íµ¨ÎÇ¥ÏãùÎãπ Îì±Î°ù
 */
export const useRegisterCafeteria = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof registerCafeteria>>,
      TError,
      { data: RegisterCafeteriaRequest },
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof registerCafeteria>>,
  TError,
  { data: RegisterCafeteriaRequest },
  TContext
> => {
  const mutationOptions = getRegisterCafeteriaMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * ÌäπÏ†ï Íµ¨ÎÇ¥ÏãùÎãπÏùò ÌäπÏ†ï ÎÇ†ÏßúÏùò ÏãùÎã®ÌëúÎ•º Îì±Î°ùÌï©ÎãàÎã§.

ÌïÑÏàò Ï†ïÎ≥¥:
- Íµ¨ÎÇ¥ÏãùÎãπ ID
- ÏãùÎã® ÎÇ†Ïßú
- ÏãùÏÇ¨ ÏãúÍ∞ÑÎåÄ (BREAKFAST, LUNCH, DINNER)
- Î©îÎâ¥ Ìï≠Î™© Î™©Î°ù (1~30Í∞ú)

ÏÑ†ÌÉù Ï†ïÎ≥¥:
- Í∞ÄÍ≤© (0~50,000Ïõê)
- Î©îÎâ¥ Ïù¥ÎØ∏ÏßÄ ÌååÏùº ID
- ÌäπÏù¥ÏÇ¨Ìï≠ (ÏµúÎåÄ 200Ïûê)

Ï§ëÎ≥µ Í≤ÄÏ¶ù:
- ÎèôÏùºÌïú Íµ¨ÎÇ¥ÏãùÎãπÏùò ÎèôÏùºÌïú ÎÇ†Ïßú, ÎèôÏùºÌïú ÏãùÏÇ¨ ÏãúÍ∞ÑÎåÄÏóêÎäî ÌïòÎÇòÏùò ÏãùÎã®ÌëúÎßå Îì±Î°ù Í∞ÄÎä•
- Ïòà: 2025-10-09 Ï†êÏã¨ ÏãùÎã®ÌëúÍ∞Ä Ïù¥ÎØ∏ ÏûàÏúºÎ©¥ Í∞ôÏùÄ ÎÇ†Ïßú Ï†êÏã¨ ÏãùÎã®Ìëú Ï∂îÍ∞Ä Îì±Î°ù Î∂àÍ∞Ä

Îì±Î°ù ÏôÑÎ£å Ïãú:
- ÏãùÎã®Ìëú ID Î∞òÌôò
- ÏûêÎèô Í≥ÑÏÇ∞Îêú Ï¥ù ÏπºÎ°úÎ¶¨ Î∞òÌôò
- Îì±Î°ùÎêú Î™®Îì† Ï†ïÎ≥¥ Î∞òÌôò
 * @summary ÏãùÎã®Ìëú Îì±Î°ù
 */
export type registerCafeteriaMenuResponse201 = {
  data: SuccessResponseRegisterCafeteriaMenuResponse;
  status: 201;
};

export type registerCafeteriaMenuResponseSuccess =
  registerCafeteriaMenuResponse201 & {
    headers: Headers;
  };

export type registerCafeteriaMenuResponse =
  registerCafeteriaMenuResponseSuccess;

export const getRegisterCafeteriaMenuUrl = () => {
  return `https://dev.nugudi.com/api/v1/admin/cafeterias/menus`;
};

export const registerCafeteriaMenu = async (
  registerCafeteriaMenuRequest: RegisterCafeteriaMenuRequest,
  options?: RequestInit,
): Promise<registerCafeteriaMenuResponse> => {
  return http<registerCafeteriaMenuResponse>(getRegisterCafeteriaMenuUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(registerCafeteriaMenuRequest),
  });
};

export const getRegisterCafeteriaMenuMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registerCafeteriaMenu>>,
    TError,
    { data: RegisterCafeteriaMenuRequest },
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof registerCafeteriaMenu>>,
  TError,
  { data: RegisterCafeteriaMenuRequest },
  TContext
> => {
  const mutationKey = ["registerCafeteriaMenu"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof registerCafeteriaMenu>>,
    { data: RegisterCafeteriaMenuRequest }
  > = (props) => {
    const { data } = props ?? {};

    return registerCafeteriaMenu(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RegisterCafeteriaMenuMutationResult = NonNullable<
  Awaited<ReturnType<typeof registerCafeteriaMenu>>
>;
export type RegisterCafeteriaMenuMutationBody = RegisterCafeteriaMenuRequest;
export type RegisterCafeteriaMenuMutationError = unknown;

/**
 * @summary ÏãùÎã®Ìëú Îì±Î°ù
 */
export const useRegisterCafeteriaMenu = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof registerCafeteriaMenu>>,
      TError,
      { data: RegisterCafeteriaMenuRequest },
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof registerCafeteriaMenu>>,
  TError,
  { data: RegisterCafeteriaMenuRequest },
  TContext
> => {
  const mutationOptions = getRegisterCafeteriaMenuMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * ÌöåÏõêÍ∞ÄÏûÖ Ïãú ÎãâÎÑ§ÏûÑ Ï§ëÎ≥µ Ïó¨Î∂ÄÎ•º ÌôïÏù∏Ìï©ÎãàÎã§.

Í≤ÄÏ¶ù Í∑úÏπô:
- Í∏∏Ïù¥: 2~12Ïûê
- ÌóàÏö© Î¨∏Ïûê: ÌïúÍ∏Ä, ÏòÅÎ¨∏(ÎåÄÏÜåÎ¨∏Ïûê), Ïà´ÏûêÎßå Í∞ÄÎä•
- ÌäπÏàòÎ¨∏Ïûê, Í≥µÎ∞±, Ïù¥Î™®ÏßÄ ÏÇ¨Ïö© Î∂àÍ∞Ä
- Ï§ëÎ≥µ Ï≤¥ÌÅ¨ (Ïù¥ÎØ∏ ÏÇ¨Ïö© Ï§ëÏù∏ ÎãâÎÑ§ÏûÑ Ï∞®Îã®)

Î∞òÌôò Í∞í:
- isAvailable: true (ÏÇ¨Ïö© Í∞ÄÎä•) / false (ÏÇ¨Ïö© Î∂àÍ∞Ä)
- nickname: Í≤ÄÏ¶ùÌïú ÎãâÎÑ§ÏûÑ
- message: ÏÇ¨Ïö© Î∂àÍ∞Ä Ïãú Íµ¨Ï≤¥Ï†ÅÏù∏ ÏÇ¨Ïú†
 * @summary ÎãâÎÑ§ÏûÑ ÏÇ¨Ïö© Í∞ÄÎä• Ïó¨Î∂Ä ÌôïÏù∏
 */
export type checkNicknameAvailabilityResponse200 = {
  data: SuccessResponseNicknameCheckResponse;
  status: 200;
};

export type checkNicknameAvailabilityResponseSuccess =
  checkNicknameAvailabilityResponse200 & {
    headers: Headers;
  };

export type checkNicknameAvailabilityResponse =
  checkNicknameAvailabilityResponseSuccess;

export const getCheckNicknameAvailabilityUrl = (
  params: CheckNicknameAvailabilityParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://dev.nugudi.com/api/v1/users/nickname/availability?${stringifiedParams}`
    : `https://dev.nugudi.com/api/v1/users/nickname/availability`;
};

export const checkNicknameAvailability = async (
  params: CheckNicknameAvailabilityParams,
  options?: RequestInit,
): Promise<checkNicknameAvailabilityResponse> => {
  return http<checkNicknameAvailabilityResponse>(
    getCheckNicknameAvailabilityUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getCheckNicknameAvailabilityQueryKey = (
  params?: CheckNicknameAvailabilityParams,
) => {
  return [
    `https://dev.nugudi.com/api/v1/users/nickname/availability`,
    ...(params ? [params] : []),
  ] as const;
};

export const getCheckNicknameAvailabilityQueryOptions = <
  TData = Awaited<ReturnType<typeof checkNicknameAvailability>>,
  TError = unknown,
>(
  params: CheckNicknameAvailabilityParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof checkNicknameAvailability>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCheckNicknameAvailabilityQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof checkNicknameAvailability>>
  > = ({ signal }) =>
    checkNicknameAvailability(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof checkNicknameAvailability>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CheckNicknameAvailabilityQueryResult = NonNullable<
  Awaited<ReturnType<typeof checkNicknameAvailability>>
>;
export type CheckNicknameAvailabilityQueryError = unknown;

export function useCheckNicknameAvailability<
  TData = Awaited<ReturnType<typeof checkNicknameAvailability>>,
  TError = unknown,
>(
  params: CheckNicknameAvailabilityParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof checkNicknameAvailability>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof checkNicknameAvailability>>,
          TError,
          Awaited<ReturnType<typeof checkNicknameAvailability>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCheckNicknameAvailability<
  TData = Awaited<ReturnType<typeof checkNicknameAvailability>>,
  TError = unknown,
>(
  params: CheckNicknameAvailabilityParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof checkNicknameAvailability>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof checkNicknameAvailability>>,
          TError,
          Awaited<ReturnType<typeof checkNicknameAvailability>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCheckNicknameAvailability<
  TData = Awaited<ReturnType<typeof checkNicknameAvailability>>,
  TError = unknown,
>(
  params: CheckNicknameAvailabilityParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof checkNicknameAvailability>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÎãâÎÑ§ÏûÑ ÏÇ¨Ïö© Í∞ÄÎä• Ïó¨Î∂Ä ÌôïÏù∏
 */

export function useCheckNicknameAvailability<
  TData = Awaited<ReturnType<typeof checkNicknameAvailability>>,
  TError = unknown,
>(
  params: CheckNicknameAvailabilityParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof checkNicknameAvailability>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getCheckNicknameAvailabilityQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary ÎãâÎÑ§ÏûÑ ÏÇ¨Ïö© Í∞ÄÎä• Ïó¨Î∂Ä ÌôïÏù∏
 */
export const prefetchCheckNicknameAvailabilityQuery = async <
  TData = Awaited<ReturnType<typeof checkNicknameAvailability>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  params: CheckNicknameAvailabilityParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof checkNicknameAvailability>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
): Promise<QueryClient> => {
  const queryOptions = getCheckNicknameAvailabilityQueryOptions(
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getCheckNicknameAvailabilitySuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof checkNicknameAvailability>>,
  TError = unknown,
>(
  params: CheckNicknameAvailabilityParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof checkNicknameAvailability>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCheckNicknameAvailabilityQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof checkNicknameAvailability>>
  > = ({ signal }) =>
    checkNicknameAvailability(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof checkNicknameAvailability>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CheckNicknameAvailabilitySuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof checkNicknameAvailability>>
>;
export type CheckNicknameAvailabilitySuspenseQueryError = unknown;

export function useCheckNicknameAvailabilitySuspense<
  TData = Awaited<ReturnType<typeof checkNicknameAvailability>>,
  TError = unknown,
>(
  params: CheckNicknameAvailabilityParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof checkNicknameAvailability>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCheckNicknameAvailabilitySuspense<
  TData = Awaited<ReturnType<typeof checkNicknameAvailability>>,
  TError = unknown,
>(
  params: CheckNicknameAvailabilityParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof checkNicknameAvailability>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCheckNicknameAvailabilitySuspense<
  TData = Awaited<ReturnType<typeof checkNicknameAvailability>>,
  TError = unknown,
>(
  params: CheckNicknameAvailabilityParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof checkNicknameAvailability>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÎãâÎÑ§ÏûÑ ÏÇ¨Ïö© Í∞ÄÎä• Ïó¨Î∂Ä ÌôïÏù∏
 */

export function useCheckNicknameAvailabilitySuspense<
  TData = Awaited<ReturnType<typeof checkNicknameAvailability>>,
  TError = unknown,
>(
  params: CheckNicknameAvailabilityParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof checkNicknameAvailability>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getCheckNicknameAvailabilitySuspenseQueryOptions(
    params,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Î°úÍ∑∏Ïù∏Ìïú Ïú†Ï†Ä Î≥∏Ïù∏Ïùò ÌîÑÎ°úÌïÑÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§
 * @summary ÎÇ¥ ÌîÑÎ°úÌïÑ Ï°∞Ìöå
 */
export type getMyProfileResponse200 = {
  data: SuccessResponseGetMyProfileResponse;
  status: 200;
};

export type getMyProfileResponseSuccess = getMyProfileResponse200 & {
  headers: Headers;
};

export type getMyProfileResponse = getMyProfileResponseSuccess;

export const getGetMyProfileUrl = () => {
  return `https://dev.nugudi.com/api/v1/users/me`;
};

export const getMyProfile = async (
  options?: RequestInit,
): Promise<getMyProfileResponse> => {
  return http<getMyProfileResponse>(getGetMyProfileUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetMyProfileQueryKey = () => {
  return [`https://dev.nugudi.com/api/v1/users/me`] as const;
};

export const getGetMyProfileQueryOptions = <
  TData = Awaited<ReturnType<typeof getMyProfile>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getMyProfile>>, TError, TData>
  >;
  request?: SecondParameter<typeof http>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMyProfileQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMyProfile>>> = ({
    signal,
  }) => getMyProfile({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMyProfile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMyProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMyProfile>>
>;
export type GetMyProfileQueryError = unknown;

export function useGetMyProfile<
  TData = Awaited<ReturnType<typeof getMyProfile>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMyProfile>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyProfile>>,
          TError,
          Awaited<ReturnType<typeof getMyProfile>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMyProfile<
  TData = Awaited<ReturnType<typeof getMyProfile>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMyProfile>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMyProfile>>,
          TError,
          Awaited<ReturnType<typeof getMyProfile>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMyProfile<
  TData = Awaited<ReturnType<typeof getMyProfile>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMyProfile>>, TError, TData>
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÎÇ¥ ÌîÑÎ°úÌïÑ Ï°∞Ìöå
 */

export function useGetMyProfile<
  TData = Awaited<ReturnType<typeof getMyProfile>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMyProfile>>, TError, TData>
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMyProfileQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary ÎÇ¥ ÌîÑÎ°úÌïÑ Ï°∞Ìöå
 */
export const prefetchGetMyProfileQuery = async <
  TData = Awaited<ReturnType<typeof getMyProfile>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMyProfile>>, TError, TData>
    >;
    request?: SecondParameter<typeof http>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetMyProfileQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getGetMyProfileSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getMyProfile>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof getMyProfile>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof http>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMyProfileQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMyProfile>>> = ({
    signal,
  }) => getMyProfile({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getMyProfile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMyProfileSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMyProfile>>
>;
export type GetMyProfileSuspenseQueryError = unknown;

export function useGetMyProfileSuspense<
  TData = Awaited<ReturnType<typeof getMyProfile>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getMyProfile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMyProfileSuspense<
  TData = Awaited<ReturnType<typeof getMyProfile>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getMyProfile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMyProfileSuspense<
  TData = Awaited<ReturnType<typeof getMyProfile>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getMyProfile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÎÇ¥ ÌîÑÎ°úÌïÑ Ï°∞Ìöå
 */

export function useGetMyProfileSuspense<
  TData = Awaited<ReturnType<typeof getMyProfile>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getMyProfile>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMyProfileSuspenseQueryOptions(options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÎÑàÍµ¨ÎîîÏóê Îì±Î°ùÎêú Íµ¨ÎÇ¥ÏãùÎãπ Î™©Î°ùÍ≥º ÌäπÏ†ï ÎÇ†ÏßúÏùò ÏãùÎã®ÌëúÎ•º Ï°∞ÌöåÌï©ÎãàÎã§.

**Ï£ºÏöî Í∏∞Îä•:**
- Íµ¨ÎÇ¥ÏãùÎãπ Í∏∞Î≥∏ Ï†ïÎ≥¥
- ÌäπÏ†ï ÎÇ†ÏßúÏùò ÏãùÎã®Ìëú (menuItems, ÏπºÎ°úÎ¶¨, Í∞ÄÍ≤© Îì±)
- ÏãùÎã®ÌëúÍ∞Ä ÏóÜÎäî Íµ¨ÎÇ¥ÏãùÎãπÏùÄ menu ÌïÑÎìúÍ∞Ä null

**ÌéòÏù¥Ïßï:**
- Ïª§ÏÑú Í∏∞Î∞ò Î¨¥Ìïú Ïä§ÌÅ¨Î°§ ÏßÄÏõê
- cursor: Îã§Ïùå ÌéòÏù¥ÏßÄÎ•º Ï°∞ÌöåÌïòÎ†§Î©¥ Ïù¥Ï†Ñ ÏùëÎãµÏùò pageInfo.nextCursor Í∞í Ï†ÑÎã¨
- size: Ìïú Î≤àÏóê Ï°∞ÌöåÌï† Í∞úÏàò (Í∏∞Î≥∏ 10Í∞ú)

**ÎÇ†Ïßú:**
- dateÎ•º ÏßÄÏ†ïÌïòÏßÄ ÏïäÏúºÎ©¥ Ïò§Îäò ÎÇ†Ïßú Í∏∞Ï§ÄÏúºÎ°ú Ï°∞Ìöå

 * @summary ÌäπÏ†ï ÎÇ†Ïßú Íµ¨ÎÇ¥ÏãùÎãπ ÏãùÎã®Ìëú Ï°∞Ìöå (Î¨¥Ìïú Ïä§ÌÅ¨Î°§)
 */
export type getCafeteriasWithMenuResponse200 = {
  data: PageResponseGetCafeteriaWithMenuResponse;
  status: 200;
};

export type getCafeteriasWithMenuResponseSuccess =
  getCafeteriasWithMenuResponse200 & {
    headers: Headers;
  };

export type getCafeteriasWithMenuResponse =
  getCafeteriasWithMenuResponseSuccess;

export const getGetCafeteriasWithMenuUrl = (
  params?: GetCafeteriasWithMenuParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://dev.nugudi.com/api/v1/cafeterias?${stringifiedParams}`
    : `https://dev.nugudi.com/api/v1/cafeterias`;
};

export const getCafeteriasWithMenu = async (
  params?: GetCafeteriasWithMenuParams,
  options?: RequestInit,
): Promise<getCafeteriasWithMenuResponse> => {
  return http<getCafeteriasWithMenuResponse>(
    getGetCafeteriasWithMenuUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetCafeteriasWithMenuQueryKey = (
  params?: GetCafeteriasWithMenuParams,
) => {
  return [
    `https://dev.nugudi.com/api/v1/cafeterias`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetCafeteriasWithMenuQueryOptions = <
  TData = Awaited<ReturnType<typeof getCafeteriasWithMenu>>,
  TError = unknown,
>(
  params?: GetCafeteriasWithMenuParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriasWithMenu>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCafeteriasWithMenuQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCafeteriasWithMenu>>
  > = ({ signal }) =>
    getCafeteriasWithMenu(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCafeteriasWithMenu>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCafeteriasWithMenuQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCafeteriasWithMenu>>
>;
export type GetCafeteriasWithMenuQueryError = unknown;

export function useGetCafeteriasWithMenu<
  TData = Awaited<ReturnType<typeof getCafeteriasWithMenu>>,
  TError = unknown,
>(
  params: undefined | GetCafeteriasWithMenuParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriasWithMenu>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCafeteriasWithMenu>>,
          TError,
          Awaited<ReturnType<typeof getCafeteriasWithMenu>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCafeteriasWithMenu<
  TData = Awaited<ReturnType<typeof getCafeteriasWithMenu>>,
  TError = unknown,
>(
  params?: GetCafeteriasWithMenuParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriasWithMenu>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCafeteriasWithMenu>>,
          TError,
          Awaited<ReturnType<typeof getCafeteriasWithMenu>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCafeteriasWithMenu<
  TData = Awaited<ReturnType<typeof getCafeteriasWithMenu>>,
  TError = unknown,
>(
  params?: GetCafeteriasWithMenuParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriasWithMenu>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÌäπÏ†ï ÎÇ†Ïßú Íµ¨ÎÇ¥ÏãùÎãπ ÏãùÎã®Ìëú Ï°∞Ìöå (Î¨¥Ìïú Ïä§ÌÅ¨Î°§)
 */

export function useGetCafeteriasWithMenu<
  TData = Awaited<ReturnType<typeof getCafeteriasWithMenu>>,
  TError = unknown,
>(
  params?: GetCafeteriasWithMenuParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriasWithMenu>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCafeteriasWithMenuQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary ÌäπÏ†ï ÎÇ†Ïßú Íµ¨ÎÇ¥ÏãùÎãπ ÏãùÎã®Ìëú Ï°∞Ìöå (Î¨¥Ìïú Ïä§ÌÅ¨Î°§)
 */
export const prefetchGetCafeteriasWithMenuQuery = async <
  TData = Awaited<ReturnType<typeof getCafeteriasWithMenu>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  params?: GetCafeteriasWithMenuParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriasWithMenu>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetCafeteriasWithMenuQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getGetCafeteriasWithMenuSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getCafeteriasWithMenu>>,
  TError = unknown,
>(
  params?: GetCafeteriasWithMenuParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriasWithMenu>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCafeteriasWithMenuQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCafeteriasWithMenu>>
  > = ({ signal }) =>
    getCafeteriasWithMenu(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getCafeteriasWithMenu>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCafeteriasWithMenuSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCafeteriasWithMenu>>
>;
export type GetCafeteriasWithMenuSuspenseQueryError = unknown;

export function useGetCafeteriasWithMenuSuspense<
  TData = Awaited<ReturnType<typeof getCafeteriasWithMenu>>,
  TError = unknown,
>(
  params: undefined | GetCafeteriasWithMenuParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriasWithMenu>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCafeteriasWithMenuSuspense<
  TData = Awaited<ReturnType<typeof getCafeteriasWithMenu>>,
  TError = unknown,
>(
  params?: GetCafeteriasWithMenuParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriasWithMenu>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCafeteriasWithMenuSuspense<
  TData = Awaited<ReturnType<typeof getCafeteriasWithMenu>>,
  TError = unknown,
>(
  params?: GetCafeteriasWithMenuParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriasWithMenu>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÌäπÏ†ï ÎÇ†Ïßú Íµ¨ÎÇ¥ÏãùÎãπ ÏãùÎã®Ìëú Ï°∞Ìöå (Î¨¥Ìïú Ïä§ÌÅ¨Î°§)
 */

export function useGetCafeteriasWithMenuSuspense<
  TData = Awaited<ReturnType<typeof getCafeteriasWithMenu>>,
  TError = unknown,
>(
  params?: GetCafeteriasWithMenuParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriasWithMenu>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCafeteriasWithMenuSuspenseQueryOptions(
    params,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * IDÎ°ú ÌäπÏ†ï Íµ¨ÎÇ¥ÏãùÎãπÏùò ÏÉÅÏÑ∏ Ï†ïÎ≥¥Î•º Ï°∞ÌöåÌï©ÎãàÎã§.

**Ï£ºÏöî Í∏∞Îä•:**
- Íµ¨ÎÇ¥ÏãùÎãπ Í∏∞Î≥∏ Ï†ïÎ≥¥
- ÌôúÏÑ±ÌôîÎêú Íµ¨ÎÇ¥ÏãùÎãπÎßå Ï°∞Ìöå Í∞ÄÎä•

**ÏóêÎü¨ ÏºÄÏù¥Ïä§:**
- Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî ID: 404 NOT_FOUND
- ÎπÑÌôúÏÑ±ÌôîÎêú Íµ¨ÎÇ¥ÏãùÎãπ: 404 NOT_FOUND

 * @summary ÌäπÏ†ï Íµ¨ÎÇ¥ÏãùÎãπ Ï°∞Ìöå
 */
export type getCafeteriaResponse200 = {
  data: SuccessResponseGetCafeteriaResponse;
  status: 200;
};

export type getCafeteriaResponseSuccess = getCafeteriaResponse200 & {
  headers: Headers;
};

export type getCafeteriaResponse = getCafeteriaResponseSuccess;

export const getGetCafeteriaUrl = (id: number) => {
  return `https://dev.nugudi.com/api/v1/cafeterias/${id}`;
};

export const getCafeteria = async (
  id: number,
  options?: RequestInit,
): Promise<getCafeteriaResponse> => {
  return http<getCafeteriaResponse>(getGetCafeteriaUrl(id), {
    ...options,
    method: "GET",
  });
};

export const getGetCafeteriaQueryKey = (id?: number) => {
  return [`https://dev.nugudi.com/api/v1/cafeterias/${id}`] as const;
};

export const getGetCafeteriaQueryOptions = <
  TData = Awaited<ReturnType<typeof getCafeteria>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCafeteria>>, TError, TData>
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCafeteriaQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCafeteria>>> = ({
    signal,
  }) => getCafeteria(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getCafeteria>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCafeteriaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCafeteria>>
>;
export type GetCafeteriaQueryError = unknown;

export function useGetCafeteria<
  TData = Awaited<ReturnType<typeof getCafeteria>>,
  TError = unknown,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCafeteria>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCafeteria>>,
          TError,
          Awaited<ReturnType<typeof getCafeteria>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCafeteria<
  TData = Awaited<ReturnType<typeof getCafeteria>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCafeteria>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCafeteria>>,
          TError,
          Awaited<ReturnType<typeof getCafeteria>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCafeteria<
  TData = Awaited<ReturnType<typeof getCafeteria>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCafeteria>>, TError, TData>
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÌäπÏ†ï Íµ¨ÎÇ¥ÏãùÎãπ Ï°∞Ìöå
 */

export function useGetCafeteria<
  TData = Awaited<ReturnType<typeof getCafeteria>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCafeteria>>, TError, TData>
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCafeteriaQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary ÌäπÏ†ï Íµ¨ÎÇ¥ÏãùÎãπ Ï°∞Ìöå
 */
export const prefetchGetCafeteriaQuery = async <
  TData = Awaited<ReturnType<typeof getCafeteria>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCafeteria>>, TError, TData>
    >;
    request?: SecondParameter<typeof http>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetCafeteriaQueryOptions(id, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getGetCafeteriaSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getCafeteria>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getCafeteria>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCafeteriaQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCafeteria>>> = ({
    signal,
  }) => getCafeteria(id, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getCafeteria>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCafeteriaSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCafeteria>>
>;
export type GetCafeteriaSuspenseQueryError = unknown;

export function useGetCafeteriaSuspense<
  TData = Awaited<ReturnType<typeof getCafeteria>>,
  TError = unknown,
>(
  id: number,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getCafeteria>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCafeteriaSuspense<
  TData = Awaited<ReturnType<typeof getCafeteria>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getCafeteria>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCafeteriaSuspense<
  TData = Awaited<ReturnType<typeof getCafeteria>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getCafeteria>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÌäπÏ†ï Íµ¨ÎÇ¥ÏãùÎãπ Ï°∞Ìöå
 */

export function useGetCafeteriaSuspense<
  TData = Awaited<ReturnType<typeof getCafeteria>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getCafeteria>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCafeteriaSuspenseQueryOptions(id, options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÌäπÏ†ï Íµ¨ÎÇ¥ÏãùÎãπÏùò ÌäπÏ†ï ÎÇ†Ïßú ÏãùÎã®ÌëúÎ•º Ï°∞ÌöåÌï©ÎãàÎã§.

**Ï£ºÏöî Í∏∞Îä•:**
- Ìï¥Îãπ ÎÇ†ÏßúÏùò Î™®Îì† ÏãùÏÇ¨ ÏãúÍ∞ÑÎåÄ ÏãùÎã®Ìëú (ÏïÑÏπ®, Ï†êÏã¨, Ï†ÄÎÖÅ)
- ÏãùÎã®ÌëúÍ∞Ä ÏóÜÏúºÎ©¥ Îπà Î∞∞Ïó¥ Î∞òÌôò

**ÎÇ†Ïßú:**
- dateÎ•º ÏßÄÏ†ïÌïòÏßÄ ÏïäÏúºÎ©¥ Ïò§Îäò ÎÇ†Ïßú Í∏∞Ï§ÄÏúºÎ°ú Ï°∞Ìöå

**ÏóêÎü¨ ÏºÄÏù¥Ïä§:**
- Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Íµ¨ÎÇ¥ÏãùÎãπ ID: 404 NOT_FOUND
- ÎπÑÌôúÏÑ±ÌôîÎêú Íµ¨ÎÇ¥ÏãùÎãπ: 404 NOT_FOUND

 * @summary ÌäπÏ†ï Íµ¨ÎÇ¥ÏãùÎãπÏùò ÌäπÏ†ï ÎÇ†Ïßú ÏãùÎã®Ìëú Ï°∞Ìöå
 */
export type getCafeteriaMenuByDateResponse200 = {
  data: SuccessResponseGetCafeteriaMenuResponse;
  status: 200;
};

export type getCafeteriaMenuByDateResponseSuccess =
  getCafeteriaMenuByDateResponse200 & {
    headers: Headers;
  };

export type getCafeteriaMenuByDateResponse =
  getCafeteriaMenuByDateResponseSuccess;

export const getGetCafeteriaMenuByDateUrl = (
  id: number,
  params?: GetCafeteriaMenuByDateParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://dev.nugudi.com/api/v1/cafeterias/${id}/menus?${stringifiedParams}`
    : `https://dev.nugudi.com/api/v1/cafeterias/${id}/menus`;
};

export const getCafeteriaMenuByDate = async (
  id: number,
  params?: GetCafeteriaMenuByDateParams,
  options?: RequestInit,
): Promise<getCafeteriaMenuByDateResponse> => {
  return http<getCafeteriaMenuByDateResponse>(
    getGetCafeteriaMenuByDateUrl(id, params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetCafeteriaMenuByDateQueryKey = (
  id?: number,
  params?: GetCafeteriaMenuByDateParams,
) => {
  return [
    `https://dev.nugudi.com/api/v1/cafeterias/${id}/menus`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetCafeteriaMenuByDateQueryOptions = <
  TData = Awaited<ReturnType<typeof getCafeteriaMenuByDate>>,
  TError = unknown,
>(
  id: number,
  params?: GetCafeteriaMenuByDateParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriaMenuByDate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCafeteriaMenuByDateQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCafeteriaMenuByDate>>
  > = ({ signal }) =>
    getCafeteriaMenuByDate(id, params, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getCafeteriaMenuByDate>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCafeteriaMenuByDateQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCafeteriaMenuByDate>>
>;
export type GetCafeteriaMenuByDateQueryError = unknown;

export function useGetCafeteriaMenuByDate<
  TData = Awaited<ReturnType<typeof getCafeteriaMenuByDate>>,
  TError = unknown,
>(
  id: number,
  params: undefined | GetCafeteriaMenuByDateParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriaMenuByDate>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCafeteriaMenuByDate>>,
          TError,
          Awaited<ReturnType<typeof getCafeteriaMenuByDate>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCafeteriaMenuByDate<
  TData = Awaited<ReturnType<typeof getCafeteriaMenuByDate>>,
  TError = unknown,
>(
  id: number,
  params?: GetCafeteriaMenuByDateParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriaMenuByDate>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCafeteriaMenuByDate>>,
          TError,
          Awaited<ReturnType<typeof getCafeteriaMenuByDate>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCafeteriaMenuByDate<
  TData = Awaited<ReturnType<typeof getCafeteriaMenuByDate>>,
  TError = unknown,
>(
  id: number,
  params?: GetCafeteriaMenuByDateParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriaMenuByDate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÌäπÏ†ï Íµ¨ÎÇ¥ÏãùÎãπÏùò ÌäπÏ†ï ÎÇ†Ïßú ÏãùÎã®Ìëú Ï°∞Ìöå
 */

export function useGetCafeteriaMenuByDate<
  TData = Awaited<ReturnType<typeof getCafeteriaMenuByDate>>,
  TError = unknown,
>(
  id: number,
  params?: GetCafeteriaMenuByDateParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriaMenuByDate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCafeteriaMenuByDateQueryOptions(
    id,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary ÌäπÏ†ï Íµ¨ÎÇ¥ÏãùÎãπÏùò ÌäπÏ†ï ÎÇ†Ïßú ÏãùÎã®Ìëú Ï°∞Ìöå
 */
export const prefetchGetCafeteriaMenuByDateQuery = async <
  TData = Awaited<ReturnType<typeof getCafeteriaMenuByDate>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  id: number,
  params?: GetCafeteriaMenuByDateParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriaMenuByDate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetCafeteriaMenuByDateQueryOptions(
    id,
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getGetCafeteriaMenuByDateSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getCafeteriaMenuByDate>>,
  TError = unknown,
>(
  id: number,
  params?: GetCafeteriaMenuByDateParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriaMenuByDate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCafeteriaMenuByDateQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCafeteriaMenuByDate>>
  > = ({ signal }) =>
    getCafeteriaMenuByDate(id, params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getCafeteriaMenuByDate>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCafeteriaMenuByDateSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCafeteriaMenuByDate>>
>;
export type GetCafeteriaMenuByDateSuspenseQueryError = unknown;

export function useGetCafeteriaMenuByDateSuspense<
  TData = Awaited<ReturnType<typeof getCafeteriaMenuByDate>>,
  TError = unknown,
>(
  id: number,
  params: undefined | GetCafeteriaMenuByDateParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriaMenuByDate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCafeteriaMenuByDateSuspense<
  TData = Awaited<ReturnType<typeof getCafeteriaMenuByDate>>,
  TError = unknown,
>(
  id: number,
  params?: GetCafeteriaMenuByDateParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriaMenuByDate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCafeteriaMenuByDateSuspense<
  TData = Awaited<ReturnType<typeof getCafeteriaMenuByDate>>,
  TError = unknown,
>(
  id: number,
  params?: GetCafeteriaMenuByDateParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriaMenuByDate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÌäπÏ†ï Íµ¨ÎÇ¥ÏãùÎãπÏùò ÌäπÏ†ï ÎÇ†Ïßú ÏãùÎã®Ìëú Ï°∞Ìöå
 */

export function useGetCafeteriaMenuByDateSuspense<
  TData = Awaited<ReturnType<typeof getCafeteriaMenuByDate>>,
  TError = unknown,
>(
  id: number,
  params?: GetCafeteriaMenuByDateParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriaMenuByDate>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCafeteriaMenuByDateSuspenseQueryOptions(
    id,
    params,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÌäπÏ†ï Íµ¨ÎÇ¥ÏãùÎãπÏùò ÌäπÏ†ï ÏõîÏóê ÏãùÎã®ÌëúÍ∞Ä ÏûàÎäî ÏùºÏûê Î™©Î°ùÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§.

**Ï£ºÏöî Í∏∞Îä•:**
- ÏßÄÏ†ïÌïú Ïó∞ÎèÑ/ÏõîÏóê ÏãùÎã®ÌëúÍ∞Ä Îì±Î°ùÎêú ÏùºÏûê Î™©Î°ù Î∞òÌôò
- Îã¨Î†• UIÏóêÏÑú ÏãùÎã®Ìëú Ïú†Î¨¥ ÌëúÏãúÏóê ÌôúÏö©

**Ï°∞Ìöå Í∞ÄÎä• Î≤îÏúÑ:**
- ÏãúÏûë: 2025ÎÖÑ 10Ïõî
- Ï¢ÖÎ£å: ÌòÑÏû¨ Ïõî
- Î≤îÏúÑÎ•º Î≤óÏñ¥ÎÇòÎ©¥ 400 ÏóêÎü¨

**ÏùëÎãµ ÏòàÏãú:**
```json
{
  "year": 2025,
  "month": 10,
  "daysWithMenu": [1, 3, 5, 12, 15, 20, 25]
}
```

**ÏóêÎü¨ ÏºÄÏù¥Ïä§:**
- Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Íµ¨ÎÇ¥ÏãùÎãπ ID: 404 NOT_FOUND
- Ï°∞Ìöå Î≤îÏúÑ Î≤óÏñ¥ÎÇ®: 400 BAD_REQUEST

 * @summary ÌäπÏ†ï Íµ¨ÎÇ¥ÏãùÎãπÏùò ÌäπÏ†ï Ïõî ÏùºÏûêÎ≥Ñ ÏãùÎã®Ìëú Ïú†Î¨¥ Ï°∞Ìöå
 */
export type getCafeteriaMenuAvailabilityResponse200 = {
  data: SuccessResponseGetCafeteriaMenuAvailabilityResponse;
  status: 200;
};

export type getCafeteriaMenuAvailabilityResponseSuccess =
  getCafeteriaMenuAvailabilityResponse200 & {
    headers: Headers;
  };

export type getCafeteriaMenuAvailabilityResponse =
  getCafeteriaMenuAvailabilityResponseSuccess;

export const getGetCafeteriaMenuAvailabilityUrl = (
  id: number,
  params: GetCafeteriaMenuAvailabilityParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://dev.nugudi.com/api/v1/cafeterias/${id}/menus/availability?${stringifiedParams}`
    : `https://dev.nugudi.com/api/v1/cafeterias/${id}/menus/availability`;
};

export const getCafeteriaMenuAvailability = async (
  id: number,
  params: GetCafeteriaMenuAvailabilityParams,
  options?: RequestInit,
): Promise<getCafeteriaMenuAvailabilityResponse> => {
  return http<getCafeteriaMenuAvailabilityResponse>(
    getGetCafeteriaMenuAvailabilityUrl(id, params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetCafeteriaMenuAvailabilityQueryKey = (
  id?: number,
  params?: GetCafeteriaMenuAvailabilityParams,
) => {
  return [
    `https://dev.nugudi.com/api/v1/cafeterias/${id}/menus/availability`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetCafeteriaMenuAvailabilityQueryOptions = <
  TData = Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>,
  TError = unknown,
>(
  id: number,
  params: GetCafeteriaMenuAvailabilityParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetCafeteriaMenuAvailabilityQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>
  > = ({ signal }) =>
    getCafeteriaMenuAvailability(id, params, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCafeteriaMenuAvailabilityQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>
>;
export type GetCafeteriaMenuAvailabilityQueryError = unknown;

export function useGetCafeteriaMenuAvailability<
  TData = Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>,
  TError = unknown,
>(
  id: number,
  params: GetCafeteriaMenuAvailabilityParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>,
          TError,
          Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCafeteriaMenuAvailability<
  TData = Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>,
  TError = unknown,
>(
  id: number,
  params: GetCafeteriaMenuAvailabilityParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>,
          TError,
          Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCafeteriaMenuAvailability<
  TData = Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>,
  TError = unknown,
>(
  id: number,
  params: GetCafeteriaMenuAvailabilityParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÌäπÏ†ï Íµ¨ÎÇ¥ÏãùÎãπÏùò ÌäπÏ†ï Ïõî ÏùºÏûêÎ≥Ñ ÏãùÎã®Ìëú Ïú†Î¨¥ Ï°∞Ìöå
 */

export function useGetCafeteriaMenuAvailability<
  TData = Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>,
  TError = unknown,
>(
  id: number,
  params: GetCafeteriaMenuAvailabilityParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCafeteriaMenuAvailabilityQueryOptions(
    id,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary ÌäπÏ†ï Íµ¨ÎÇ¥ÏãùÎãπÏùò ÌäπÏ†ï Ïõî ÏùºÏûêÎ≥Ñ ÏãùÎã®Ìëú Ïú†Î¨¥ Ï°∞Ìöå
 */
export const prefetchGetCafeteriaMenuAvailabilityQuery = async <
  TData = Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  id: number,
  params: GetCafeteriaMenuAvailabilityParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetCafeteriaMenuAvailabilityQueryOptions(
    id,
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getGetCafeteriaMenuAvailabilitySuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>,
  TError = unknown,
>(
  id: number,
  params: GetCafeteriaMenuAvailabilityParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetCafeteriaMenuAvailabilityQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>
  > = ({ signal }) =>
    getCafeteriaMenuAvailability(id, params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCafeteriaMenuAvailabilitySuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>
>;
export type GetCafeteriaMenuAvailabilitySuspenseQueryError = unknown;

export function useGetCafeteriaMenuAvailabilitySuspense<
  TData = Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>,
  TError = unknown,
>(
  id: number,
  params: GetCafeteriaMenuAvailabilityParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCafeteriaMenuAvailabilitySuspense<
  TData = Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>,
  TError = unknown,
>(
  id: number,
  params: GetCafeteriaMenuAvailabilityParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCafeteriaMenuAvailabilitySuspense<
  TData = Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>,
  TError = unknown,
>(
  id: number,
  params: GetCafeteriaMenuAvailabilityParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÌäπÏ†ï Íµ¨ÎÇ¥ÏãùÎãπÏùò ÌäπÏ†ï Ïõî ÏùºÏûêÎ≥Ñ ÏãùÎã®Ìëú Ïú†Î¨¥ Ï°∞Ìöå
 */

export function useGetCafeteriaMenuAvailabilitySuspense<
  TData = Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>,
  TError = unknown,
>(
  id: number,
  params: GetCafeteriaMenuAvailabilityParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getCafeteriaMenuAvailability>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCafeteriaMenuAvailabilitySuspenseQueryOptions(
    id,
    params,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÎÑ§Ïù¥Î≤Ñ OAuth Ïù∏Ï¶ùÏùÑ ÏúÑÌïú Ïù∏Ï¶ù URLÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§.

OAuth ÏÑ§Ï†ïÏùÑ ÏÑúÎ≤ÑÏóêÏÑú Ï§ëÏïô Í¥ÄÎ¶¨ÌïòÏó¨ ÌîÑÎ°†Ìä∏ÏóîÎìú-Î∞±ÏóîÎìú Í∞Ñ ÏÑ§Ï†ï ÎèôÍ∏∞ÌôîÎ•º Î≥¥Ïû•Ìï©ÎãàÎã§.

ÏÇ¨Ïö© Î∞©Î≤ï:
1. ÌîÑÎ°†Ìä∏ÏóîÎìúÏùò redirect_uriÎ•º ÌååÎùºÎØ∏ÌÑ∞Î°ú Ï†ÑÎã¨ÌïòÏó¨ Ïù¥ API Ìò∏Ï∂ú
2. ÏÑ†ÌÉùÏ†ÅÏúºÎ°ú CSRF Î∞©ÏßÄÎ•º ÏúÑÌïú state ÌååÎùºÎØ∏ÌÑ∞ Ï†ÑÎã¨
3. Î∞õÏùÄ URLÎ°ú ÏÇ¨Ïö©ÏûêÎ•º Î¶¨Îã§Ïù¥Î†âÌä∏
4. ÏÇ¨Ïö©ÏûêÍ∞Ä ÎÑ§Ïù¥Î≤Ñ Î°úÍ∑∏Ïù∏ Î∞è ÎèôÏùò ÏôÑÎ£å
5. ÌîÑÎ°†Ìä∏ÏóîÎìú redirect_uriÎ°ú Ïù∏Í∞Ä ÏΩîÎìú(code)ÏôÄ stateÍ∞Ä Ï†ÑÎã¨Îê®
6. Ïù∏Í∞Ä ÏΩîÎìúÏôÄ stateÎ•º /api/v1/auth/login/naver ÏóîÎìúÌè¨Ïù∏Ìä∏Î°ú Ï†ÑÎã¨ÌïòÏó¨ Î°úÍ∑∏Ïù∏ ÏôÑÎ£å

Ï∞∏Í≥†:
- redirect_uriÎäî ÎÑ§Ïù¥Î≤Ñ Í∞úÎ∞úÏûê ÏÑºÌÑ∞Ïóê Îì±Î°ùÎêú URIÏó¨Ïïº Ìï©ÎãàÎã§
- Î°úÏª¨: http://localhost:3000/api/auth/callback/naver

- Î∞∞Ìè¨: https://nugudi.com/api/auth/callback/naver
 * @summary ÎÑ§Ïù¥Î≤Ñ OAuth Ïù∏Ï¶ù URL Ï°∞Ìöå
 */
export type getNaverAuthorizeUrlResponse200 = {
  data: SuccessResponseGetNaverAuthorizeResponse;
  status: 200;
};

export type getNaverAuthorizeUrlResponseSuccess =
  getNaverAuthorizeUrlResponse200 & {
    headers: Headers;
  };

export type getNaverAuthorizeUrlResponse = getNaverAuthorizeUrlResponseSuccess;

export const getGetNaverAuthorizeUrlUrl = (
  params: GetNaverAuthorizeUrlParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://dev.nugudi.com/api/v1/auth/login/naver/authorize-url?${stringifiedParams}`
    : `https://dev.nugudi.com/api/v1/auth/login/naver/authorize-url`;
};

export const getNaverAuthorizeUrl = async (
  params: GetNaverAuthorizeUrlParams,
  options?: RequestInit,
): Promise<getNaverAuthorizeUrlResponse> => {
  return http<getNaverAuthorizeUrlResponse>(
    getGetNaverAuthorizeUrlUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetNaverAuthorizeUrlQueryKey = (
  params?: GetNaverAuthorizeUrlParams,
) => {
  return [
    `https://dev.nugudi.com/api/v1/auth/login/naver/authorize-url`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetNaverAuthorizeUrlQueryOptions = <
  TData = Awaited<ReturnType<typeof getNaverAuthorizeUrl>>,
  TError = unknown,
>(
  params: GetNaverAuthorizeUrlParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNaverAuthorizeUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetNaverAuthorizeUrlQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getNaverAuthorizeUrl>>
  > = ({ signal }) =>
    getNaverAuthorizeUrl(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getNaverAuthorizeUrl>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetNaverAuthorizeUrlQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNaverAuthorizeUrl>>
>;
export type GetNaverAuthorizeUrlQueryError = unknown;

export function useGetNaverAuthorizeUrl<
  TData = Awaited<ReturnType<typeof getNaverAuthorizeUrl>>,
  TError = unknown,
>(
  params: GetNaverAuthorizeUrlParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNaverAuthorizeUrl>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNaverAuthorizeUrl>>,
          TError,
          Awaited<ReturnType<typeof getNaverAuthorizeUrl>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNaverAuthorizeUrl<
  TData = Awaited<ReturnType<typeof getNaverAuthorizeUrl>>,
  TError = unknown,
>(
  params: GetNaverAuthorizeUrlParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNaverAuthorizeUrl>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNaverAuthorizeUrl>>,
          TError,
          Awaited<ReturnType<typeof getNaverAuthorizeUrl>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNaverAuthorizeUrl<
  TData = Awaited<ReturnType<typeof getNaverAuthorizeUrl>>,
  TError = unknown,
>(
  params: GetNaverAuthorizeUrlParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNaverAuthorizeUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÎÑ§Ïù¥Î≤Ñ OAuth Ïù∏Ï¶ù URL Ï°∞Ìöå
 */

export function useGetNaverAuthorizeUrl<
  TData = Awaited<ReturnType<typeof getNaverAuthorizeUrl>>,
  TError = unknown,
>(
  params: GetNaverAuthorizeUrlParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNaverAuthorizeUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetNaverAuthorizeUrlQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary ÎÑ§Ïù¥Î≤Ñ OAuth Ïù∏Ï¶ù URL Ï°∞Ìöå
 */
export const prefetchGetNaverAuthorizeUrlQuery = async <
  TData = Awaited<ReturnType<typeof getNaverAuthorizeUrl>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  params: GetNaverAuthorizeUrlParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNaverAuthorizeUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetNaverAuthorizeUrlQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getGetNaverAuthorizeUrlSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getNaverAuthorizeUrl>>,
  TError = unknown,
>(
  params: GetNaverAuthorizeUrlParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getNaverAuthorizeUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetNaverAuthorizeUrlQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getNaverAuthorizeUrl>>
  > = ({ signal }) =>
    getNaverAuthorizeUrl(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getNaverAuthorizeUrl>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetNaverAuthorizeUrlSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNaverAuthorizeUrl>>
>;
export type GetNaverAuthorizeUrlSuspenseQueryError = unknown;

export function useGetNaverAuthorizeUrlSuspense<
  TData = Awaited<ReturnType<typeof getNaverAuthorizeUrl>>,
  TError = unknown,
>(
  params: GetNaverAuthorizeUrlParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getNaverAuthorizeUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNaverAuthorizeUrlSuspense<
  TData = Awaited<ReturnType<typeof getNaverAuthorizeUrl>>,
  TError = unknown,
>(
  params: GetNaverAuthorizeUrlParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getNaverAuthorizeUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNaverAuthorizeUrlSuspense<
  TData = Awaited<ReturnType<typeof getNaverAuthorizeUrl>>,
  TError = unknown,
>(
  params: GetNaverAuthorizeUrlParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getNaverAuthorizeUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÎÑ§Ïù¥Î≤Ñ OAuth Ïù∏Ï¶ù URL Ï°∞Ìöå
 */

export function useGetNaverAuthorizeUrlSuspense<
  TData = Awaited<ReturnType<typeof getNaverAuthorizeUrl>>,
  TError = unknown,
>(
  params: GetNaverAuthorizeUrlParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getNaverAuthorizeUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetNaverAuthorizeUrlSuspenseQueryOptions(
    params,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Ïπ¥Ïπ¥Ïò§ OAuth Ïù∏Ï¶ùÏùÑ ÏúÑÌïú Ïù∏Ï¶ù URLÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§.

OAuth ÏÑ§Ï†ïÏùÑ ÏÑúÎ≤ÑÏóêÏÑú Ï§ëÏïô Í¥ÄÎ¶¨ÌïòÏó¨ ÌîÑÎ°†Ìä∏ÏóîÎìú-Î∞±ÏóîÎìú Í∞Ñ ÏÑ§Ï†ï ÎèôÍ∏∞ÌôîÎ•º Î≥¥Ïû•Ìï©ÎãàÎã§.

ÏÇ¨Ïö© Î∞©Î≤ï:
1. ÌîÑÎ°†Ìä∏ÏóîÎìúÏùò redirect_uriÎ•º ÌååÎùºÎØ∏ÌÑ∞Î°ú Ï†ÑÎã¨ÌïòÏó¨ Ïù¥ API Ìò∏Ï∂ú
2. Î∞õÏùÄ URLÎ°ú ÏÇ¨Ïö©ÏûêÎ•º Î¶¨Îã§Ïù¥Î†âÌä∏
3. ÏÇ¨Ïö©ÏûêÍ∞Ä Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ Î∞è ÎèôÏùò ÏôÑÎ£å
4. ÌîÑÎ°†Ìä∏ÏóîÎìú redirect_uriÎ°ú Ïù∏Í∞Ä ÏΩîÎìú(code)Í∞Ä Ï†ÑÎã¨Îê®
5. Ïù∏Í∞Ä ÏΩîÎìúÎ•º /api/v1/auth/login/kakao ÏóîÎìúÌè¨Ïù∏Ìä∏Î°ú Ï†ÑÎã¨ÌïòÏó¨ Î°úÍ∑∏Ïù∏ ÏôÑÎ£å

Ï∞∏Í≥†:
- redirect_uriÎäî Ïπ¥Ïπ¥Ïò§ Í∞úÎ∞úÏûê ÏΩòÏÜîÏóê Îì±Î°ùÎêú URIÏó¨Ïïº Ìï©ÎãàÎã§
- Î°úÏª¨: http://localhost:3000/api/auth/callback/kakao

- Î∞∞Ìè¨: https://nugudi.com/api/auth/callback/kakao
 * @summary Ïπ¥Ïπ¥Ïò§ OAuth Ïù∏Ï¶ù URL Ï°∞Ìöå
 */
export type getKakaoAuthorizeUrlResponse200 = {
  data: SuccessResponseGetKakaoAuthorizeResponse;
  status: 200;
};

export type getKakaoAuthorizeUrlResponseSuccess =
  getKakaoAuthorizeUrlResponse200 & {
    headers: Headers;
  };

export type getKakaoAuthorizeUrlResponse = getKakaoAuthorizeUrlResponseSuccess;

export const getGetKakaoAuthorizeUrlUrl = (
  params: GetKakaoAuthorizeUrlParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://dev.nugudi.com/api/v1/auth/login/kakao/authorize-url?${stringifiedParams}`
    : `https://dev.nugudi.com/api/v1/auth/login/kakao/authorize-url`;
};

export const getKakaoAuthorizeUrl = async (
  params: GetKakaoAuthorizeUrlParams,
  options?: RequestInit,
): Promise<getKakaoAuthorizeUrlResponse> => {
  return http<getKakaoAuthorizeUrlResponse>(
    getGetKakaoAuthorizeUrlUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetKakaoAuthorizeUrlQueryKey = (
  params?: GetKakaoAuthorizeUrlParams,
) => {
  return [
    `https://dev.nugudi.com/api/v1/auth/login/kakao/authorize-url`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetKakaoAuthorizeUrlQueryOptions = <
  TData = Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>,
  TError = unknown,
>(
  params: GetKakaoAuthorizeUrlParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetKakaoAuthorizeUrlQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>
  > = ({ signal }) =>
    getKakaoAuthorizeUrl(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetKakaoAuthorizeUrlQueryResult = NonNullable<
  Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>
>;
export type GetKakaoAuthorizeUrlQueryError = unknown;

export function useGetKakaoAuthorizeUrl<
  TData = Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>,
  TError = unknown,
>(
  params: GetKakaoAuthorizeUrlParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>,
          TError,
          Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetKakaoAuthorizeUrl<
  TData = Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>,
  TError = unknown,
>(
  params: GetKakaoAuthorizeUrlParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>,
          TError,
          Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetKakaoAuthorizeUrl<
  TData = Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>,
  TError = unknown,
>(
  params: GetKakaoAuthorizeUrlParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Ïπ¥Ïπ¥Ïò§ OAuth Ïù∏Ï¶ù URL Ï°∞Ìöå
 */

export function useGetKakaoAuthorizeUrl<
  TData = Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>,
  TError = unknown,
>(
  params: GetKakaoAuthorizeUrlParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetKakaoAuthorizeUrlQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Ïπ¥Ïπ¥Ïò§ OAuth Ïù∏Ï¶ù URL Ï°∞Ìöå
 */
export const prefetchGetKakaoAuthorizeUrlQuery = async <
  TData = Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  params: GetKakaoAuthorizeUrlParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetKakaoAuthorizeUrlQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getGetKakaoAuthorizeUrlSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>,
  TError = unknown,
>(
  params: GetKakaoAuthorizeUrlParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetKakaoAuthorizeUrlQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>
  > = ({ signal }) =>
    getKakaoAuthorizeUrl(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetKakaoAuthorizeUrlSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>
>;
export type GetKakaoAuthorizeUrlSuspenseQueryError = unknown;

export function useGetKakaoAuthorizeUrlSuspense<
  TData = Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>,
  TError = unknown,
>(
  params: GetKakaoAuthorizeUrlParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetKakaoAuthorizeUrlSuspense<
  TData = Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>,
  TError = unknown,
>(
  params: GetKakaoAuthorizeUrlParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetKakaoAuthorizeUrlSuspense<
  TData = Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>,
  TError = unknown,
>(
  params: GetKakaoAuthorizeUrlParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Ïπ¥Ïπ¥Ïò§ OAuth Ïù∏Ï¶ù URL Ï°∞Ìöå
 */

export function useGetKakaoAuthorizeUrlSuspense<
  TData = Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>,
  TError = unknown,
>(
  params: GetKakaoAuthorizeUrlParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getKakaoAuthorizeUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetKakaoAuthorizeUrlSuspenseQueryOptions(
    params,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Íµ¨Í∏Ä OAuth Ïù∏Ï¶ùÏùÑ ÏúÑÌïú Ïù∏Ï¶ù URLÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§.

OAuth ÏÑ§Ï†ïÏùÑ ÏÑúÎ≤ÑÏóêÏÑú Ï§ëÏïô Í¥ÄÎ¶¨ÌïòÏó¨ ÌîÑÎ°†Ìä∏ÏóîÎìú-Î∞±ÏóîÎìú Í∞Ñ ÏÑ§Ï†ï ÎèôÍ∏∞ÌôîÎ•º Î≥¥Ïû•Ìï©ÎãàÎã§.

ÏÇ¨Ïö© Î∞©Î≤ï:
1. ÌîÑÎ°†Ìä∏ÏóîÎìúÏùò redirect_uriÎ•º ÌååÎùºÎØ∏ÌÑ∞Î°ú Ï†ÑÎã¨ÌïòÏó¨ Ïù¥ API Ìò∏Ï∂ú
2. Î∞õÏùÄ URLÎ°ú ÏÇ¨Ïö©ÏûêÎ•º Î¶¨Îã§Ïù¥Î†âÌä∏
3. ÏÇ¨Ïö©ÏûêÍ∞Ä Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏ Î∞è ÎèôÏùò ÏôÑÎ£å
4. ÌîÑÎ°†Ìä∏ÏóîÎìú redirect_uriÎ°ú Ïù∏Í∞Ä ÏΩîÎìú(code)Í∞Ä Ï†ÑÎã¨Îê®
5. Ïù∏Í∞Ä ÏΩîÎìúÎ•º /api/v1/auth/login/google ÏóîÎìúÌè¨Ïù∏Ìä∏Î°ú Ï†ÑÎã¨ÌïòÏó¨ Î°úÍ∑∏Ïù∏ ÏôÑÎ£å

Ï∞∏Í≥†:
- redirect_uriÎäî Íµ¨Í∏Ä Í∞úÎ∞úÏûê ÏΩòÏÜîÏóê Îì±Î°ùÎêú URIÏó¨Ïïº Ìï©ÎãàÎã§
- Î°úÏª¨: http://localhost:3000/api/auth/callback/google

- Î∞∞Ìè¨: https://nugudi.com/api/auth/callback/google
 * @summary Íµ¨Í∏Ä OAuth Ïù∏Ï¶ù URL Ï°∞Ìöå
 */
export type getGoogleAuthorizeUrlResponse200 = {
  data: SuccessResponseGetGoogleAuthorizeResponse;
  status: 200;
};

export type getGoogleAuthorizeUrlResponseSuccess =
  getGoogleAuthorizeUrlResponse200 & {
    headers: Headers;
  };

export type getGoogleAuthorizeUrlResponse =
  getGoogleAuthorizeUrlResponseSuccess;

export const getGetGoogleAuthorizeUrlUrl = (
  params: GetGoogleAuthorizeUrlParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://dev.nugudi.com/api/v1/auth/login/google/authorize-url?${stringifiedParams}`
    : `https://dev.nugudi.com/api/v1/auth/login/google/authorize-url`;
};

export const getGoogleAuthorizeUrl = async (
  params: GetGoogleAuthorizeUrlParams,
  options?: RequestInit,
): Promise<getGoogleAuthorizeUrlResponse> => {
  return http<getGoogleAuthorizeUrlResponse>(
    getGetGoogleAuthorizeUrlUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetGoogleAuthorizeUrlQueryKey = (
  params?: GetGoogleAuthorizeUrlParams,
) => {
  return [
    `https://dev.nugudi.com/api/v1/auth/login/google/authorize-url`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetGoogleAuthorizeUrlQueryOptions = <
  TData = Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>,
  TError = unknown,
>(
  params: GetGoogleAuthorizeUrlParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetGoogleAuthorizeUrlQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>
  > = ({ signal }) =>
    getGoogleAuthorizeUrl(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetGoogleAuthorizeUrlQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>
>;
export type GetGoogleAuthorizeUrlQueryError = unknown;

export function useGetGoogleAuthorizeUrl<
  TData = Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>,
  TError = unknown,
>(
  params: GetGoogleAuthorizeUrlParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>,
          TError,
          Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetGoogleAuthorizeUrl<
  TData = Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>,
  TError = unknown,
>(
  params: GetGoogleAuthorizeUrlParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>,
          TError,
          Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetGoogleAuthorizeUrl<
  TData = Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>,
  TError = unknown,
>(
  params: GetGoogleAuthorizeUrlParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Íµ¨Í∏Ä OAuth Ïù∏Ï¶ù URL Ï°∞Ìöå
 */

export function useGetGoogleAuthorizeUrl<
  TData = Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>,
  TError = unknown,
>(
  params: GetGoogleAuthorizeUrlParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetGoogleAuthorizeUrlQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Íµ¨Í∏Ä OAuth Ïù∏Ï¶ù URL Ï°∞Ìöå
 */
export const prefetchGetGoogleAuthorizeUrlQuery = async <
  TData = Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  params: GetGoogleAuthorizeUrlParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetGoogleAuthorizeUrlQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getGetGoogleAuthorizeUrlSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>,
  TError = unknown,
>(
  params: GetGoogleAuthorizeUrlParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetGoogleAuthorizeUrlQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>
  > = ({ signal }) =>
    getGoogleAuthorizeUrl(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetGoogleAuthorizeUrlSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>
>;
export type GetGoogleAuthorizeUrlSuspenseQueryError = unknown;

export function useGetGoogleAuthorizeUrlSuspense<
  TData = Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>,
  TError = unknown,
>(
  params: GetGoogleAuthorizeUrlParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetGoogleAuthorizeUrlSuspense<
  TData = Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>,
  TError = unknown,
>(
  params: GetGoogleAuthorizeUrlParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetGoogleAuthorizeUrlSuspense<
  TData = Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>,
  TError = unknown,
>(
  params: GetGoogleAuthorizeUrlParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Íµ¨Í∏Ä OAuth Ïù∏Ï¶ù URL Ï°∞Ìöå
 */

export function useGetGoogleAuthorizeUrlSuspense<
  TData = Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>,
  TError = unknown,
>(
  params: GetGoogleAuthorizeUrlParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getGoogleAuthorizeUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetGoogleAuthorizeUrlSuspenseQueryOptions(
    params,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
