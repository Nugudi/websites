/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ÎÑàÍµ¨Îîî API
 * Íµ¨ÎÇ¥ÏãùÎãπ ÌîåÎû´Ìèº API
 * OpenAPI spec version: v1
 */

import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import { http } from "./api/http";
import type {
  EmailVerificationRequest,
  EmailVerifyRequest,
  LocalLoginRequest,
  SendEmailVerificationCode200,
  SignUpLocalRequest,
  SuccessResponseEmailVerifyResponse,
  SuccessResponseLocalLoginResponse,
  SuccessResponseNicknameCheckResponse,
  SuccessResponseRefreshTokenResponse,
  SuccessResponseSignUpResponse,
} from "./index.schemas";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export type signUpLocalResponse201 = {
  data: SuccessResponseSignUpResponse;
  status: 201;
};

export type signUpLocalResponseComposite = signUpLocalResponse201;

export type signUpLocalResponse = signUpLocalResponseComposite & {
  headers: Headers;
};

export const getSignUpLocalUrl = () => {
  return `https://dev.nugudi.com/api/v1/auth/signup/local`;
};

export const signUpLocal = async (
  signUpLocalRequest: SignUpLocalRequest,
  options?: RequestInit,
): Promise<signUpLocalResponse> => {
  return http<signUpLocalResponse>(getSignUpLocalUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(signUpLocalRequest),
  });
};

export const getSignUpLocalMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof signUpLocal>>,
    TError,
    { data: SignUpLocalRequest },
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof signUpLocal>>,
  TError,
  { data: SignUpLocalRequest },
  TContext
> => {
  const mutationKey = ["signUpLocal"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof signUpLocal>>,
    { data: SignUpLocalRequest }
  > = (props) => {
    const { data } = props ?? {};

    return signUpLocal(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SignUpLocalMutationResult = NonNullable<
  Awaited<ReturnType<typeof signUpLocal>>
>;
export type SignUpLocalMutationBody = SignUpLocalRequest;
export type SignUpLocalMutationError = unknown;

export const useSignUpLocal = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof signUpLocal>>,
      TError,
      { data: SignUpLocalRequest },
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof signUpLocal>>,
  TError,
  { data: SignUpLocalRequest },
  TContext
> => {
  const mutationOptions = getSignUpLocalMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Î¶¨ÌîÑÎ†àÏãú ÌÜ†ÌÅ∞ÏúºÎ°ú ÏÉàÎ°úÏö¥ ÌÜ†ÌÅ∞ÏùÑ Î∞úÍ∏âÎ∞õÏäµÎãàÎã§. Authorization Ìó§ÎçîÏóê 'Bearer {refreshToken}' ÌòïÏãùÏúºÎ°ú Ï†ÑÎã¨Ìï¥Ï£ºÏÑ∏Ïöî.
 * @summary JWT ÌÜ†ÌÅ∞ Í∞±Ïã†
 */
export type refreshTokenResponse200 = {
  data: SuccessResponseRefreshTokenResponse;
  status: 200;
};

export type refreshTokenResponseComposite = refreshTokenResponse200;

export type refreshTokenResponse = refreshTokenResponseComposite & {
  headers: Headers;
};

export const getRefreshTokenUrl = () => {
  return `https://dev.nugudi.com/api/v1/auth/refresh`;
};

export const refreshToken = async (
  options?: RequestInit,
): Promise<refreshTokenResponse> => {
  return http<refreshTokenResponse>(getRefreshTokenUrl(), {
    ...options,
    method: "POST",
  });
};

export const getRefreshTokenMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof refreshToken>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof refreshToken>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["refreshToken"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof refreshToken>>,
    void
  > = () => {
    return refreshToken(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RefreshTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof refreshToken>>
>;

export type RefreshTokenMutationError = unknown;

/**
 * @summary JWT ÌÜ†ÌÅ∞ Í∞±Ïã†
 */
export const useRefreshToken = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof refreshToken>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof refreshToken>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getRefreshTokenMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type localLoginResponse200 = {
  data: SuccessResponseLocalLoginResponse;
  status: 200;
};

export type localLoginResponseComposite = localLoginResponse200;

export type localLoginResponse = localLoginResponseComposite & {
  headers: Headers;
};

export const getLocalLoginUrl = () => {
  return `https://dev.nugudi.com/api/v1/auth/login/local`;
};

export const localLogin = async (
  localLoginRequest: LocalLoginRequest,
  options?: RequestInit,
): Promise<localLoginResponse> => {
  return http<localLoginResponse>(getLocalLoginUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(localLoginRequest),
  });
};

export const getLocalLoginMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof localLogin>>,
    TError,
    { data: LocalLoginRequest },
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof localLogin>>,
  TError,
  { data: LocalLoginRequest },
  TContext
> => {
  const mutationKey = ["localLogin"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof localLogin>>,
    { data: LocalLoginRequest }
  > = (props) => {
    const { data } = props ?? {};

    return localLogin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type LocalLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof localLogin>>
>;
export type LocalLoginMutationBody = LocalLoginRequest;
export type LocalLoginMutationError = unknown;

export const useLocalLogin = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof localLogin>>,
      TError,
      { data: LocalLoginRequest },
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof localLogin>>,
  TError,
  { data: LocalLoginRequest },
  TContext
> => {
  const mutationOptions = getLocalLoginMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type verifyEmailCodeResponse200 = {
  data: SuccessResponseEmailVerifyResponse;
  status: 200;
};

export type verifyEmailCodeResponseComposite = verifyEmailCodeResponse200;

export type verifyEmailCodeResponse = verifyEmailCodeResponseComposite & {
  headers: Headers;
};

export const getVerifyEmailCodeUrl = () => {
  return `https://dev.nugudi.com/api/v1/auth/email/verify-code`;
};

export const verifyEmailCode = async (
  emailVerifyRequest: EmailVerifyRequest,
  options?: RequestInit,
): Promise<verifyEmailCodeResponse> => {
  return http<verifyEmailCodeResponse>(getVerifyEmailCodeUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(emailVerifyRequest),
  });
};

export const getVerifyEmailCodeMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof verifyEmailCode>>,
    TError,
    { data: EmailVerifyRequest },
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof verifyEmailCode>>,
  TError,
  { data: EmailVerifyRequest },
  TContext
> => {
  const mutationKey = ["verifyEmailCode"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof verifyEmailCode>>,
    { data: EmailVerifyRequest }
  > = (props) => {
    const { data } = props ?? {};

    return verifyEmailCode(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type VerifyEmailCodeMutationResult = NonNullable<
  Awaited<ReturnType<typeof verifyEmailCode>>
>;
export type VerifyEmailCodeMutationBody = EmailVerifyRequest;
export type VerifyEmailCodeMutationError = unknown;

export const useVerifyEmailCode = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof verifyEmailCode>>,
      TError,
      { data: EmailVerifyRequest },
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof verifyEmailCode>>,
  TError,
  { data: EmailVerifyRequest },
  TContext
> => {
  const mutationOptions = getVerifyEmailCodeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type sendEmailVerificationCodeResponse200 = {
  data: SendEmailVerificationCode200;
  status: 200;
};

export type sendEmailVerificationCodeResponseComposite =
  sendEmailVerificationCodeResponse200;

export type sendEmailVerificationCodeResponse =
  sendEmailVerificationCodeResponseComposite & {
    headers: Headers;
  };

export const getSendEmailVerificationCodeUrl = () => {
  return `https://dev.nugudi.com/api/v1/auth/email/send-code`;
};

export const sendEmailVerificationCode = async (
  emailVerificationRequest: EmailVerificationRequest,
  options?: RequestInit,
): Promise<sendEmailVerificationCodeResponse> => {
  return http<sendEmailVerificationCodeResponse>(
    getSendEmailVerificationCodeUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(emailVerificationRequest),
    },
  );
};

export const getSendEmailVerificationCodeMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sendEmailVerificationCode>>,
    TError,
    { data: EmailVerificationRequest },
    TContext
  >;
  request?: SecondParameter<typeof http>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof sendEmailVerificationCode>>,
  TError,
  { data: EmailVerificationRequest },
  TContext
> => {
  const mutationKey = ["sendEmailVerificationCode"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof sendEmailVerificationCode>>,
    { data: EmailVerificationRequest }
  > = (props) => {
    const { data } = props ?? {};

    return sendEmailVerificationCode(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SendEmailVerificationCodeMutationResult = NonNullable<
  Awaited<ReturnType<typeof sendEmailVerificationCode>>
>;
export type SendEmailVerificationCodeMutationBody = EmailVerificationRequest;
export type SendEmailVerificationCodeMutationError = unknown;

export const useSendEmailVerificationCode = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof sendEmailVerificationCode>>,
      TError,
      { data: EmailVerificationRequest },
      TContext
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof sendEmailVerificationCode>>,
  TError,
  { data: EmailVerificationRequest },
  TContext
> => {
  const mutationOptions = getSendEmailVerificationCodeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * ÌöåÏõêÍ∞ÄÏûÖ Ïãú ÎãâÎÑ§ÏûÑ Ï§ëÎ≥µ Ïó¨Î∂ÄÎ•º ÌôïÏù∏Ìï©ÎãàÎã§
 * @summary ÎãâÎÑ§ÏûÑ ÏÇ¨Ïö© Í∞ÄÎä• Ïó¨Î∂Ä ÌôïÏù∏
 */
export type checkNicknameAvailabilityResponse200 = {
  data: SuccessResponseNicknameCheckResponse;
  status: 200;
};

export type checkNicknameAvailabilityResponseComposite =
  checkNicknameAvailabilityResponse200;

export type checkNicknameAvailabilityResponse =
  checkNicknameAvailabilityResponseComposite & {
    headers: Headers;
  };

export const getCheckNicknameAvailabilityUrl = (nickname: string) => {
  return `https://dev.nugudi.com/api/v1/users/nicknames/${nickname}/availability`;
};

export const checkNicknameAvailability = async (
  nickname: string,
  options?: RequestInit,
): Promise<checkNicknameAvailabilityResponse> => {
  return http<checkNicknameAvailabilityResponse>(
    getCheckNicknameAvailabilityUrl(nickname),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getCheckNicknameAvailabilityQueryKey = (nickname: string) => {
  return [
    `https://dev.nugudi.com/api/v1/users/nicknames/${nickname}/availability`,
  ] as const;
};

export const getCheckNicknameAvailabilityQueryOptions = <
  TData = Awaited<ReturnType<typeof checkNicknameAvailability>>,
  TError = unknown,
>(
  nickname: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof checkNicknameAvailability>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCheckNicknameAvailabilityQueryKey(nickname);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof checkNicknameAvailability>>
  > = ({ signal }) =>
    checkNicknameAvailability(nickname, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!nickname,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof checkNicknameAvailability>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CheckNicknameAvailabilityQueryResult = NonNullable<
  Awaited<ReturnType<typeof checkNicknameAvailability>>
>;
export type CheckNicknameAvailabilityQueryError = unknown;

export function useCheckNicknameAvailability<
  TData = Awaited<ReturnType<typeof checkNicknameAvailability>>,
  TError = unknown,
>(
  nickname: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof checkNicknameAvailability>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof checkNicknameAvailability>>,
          TError,
          Awaited<ReturnType<typeof checkNicknameAvailability>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCheckNicknameAvailability<
  TData = Awaited<ReturnType<typeof checkNicknameAvailability>>,
  TError = unknown,
>(
  nickname: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof checkNicknameAvailability>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof checkNicknameAvailability>>,
          TError,
          Awaited<ReturnType<typeof checkNicknameAvailability>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCheckNicknameAvailability<
  TData = Awaited<ReturnType<typeof checkNicknameAvailability>>,
  TError = unknown,
>(
  nickname: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof checkNicknameAvailability>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÎãâÎÑ§ÏûÑ ÏÇ¨Ïö© Í∞ÄÎä• Ïó¨Î∂Ä ÌôïÏù∏
 */

export function useCheckNicknameAvailability<
  TData = Awaited<ReturnType<typeof checkNicknameAvailability>>,
  TError = unknown,
>(
  nickname: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof checkNicknameAvailability>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getCheckNicknameAvailabilityQueryOptions(
    nickname,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary ÎãâÎÑ§ÏûÑ ÏÇ¨Ïö© Í∞ÄÎä• Ïó¨Î∂Ä ÌôïÏù∏
 */
export const prefetchCheckNicknameAvailabilityQuery = async <
  TData = Awaited<ReturnType<typeof checkNicknameAvailability>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  nickname: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof checkNicknameAvailability>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
): Promise<QueryClient> => {
  const queryOptions = getCheckNicknameAvailabilityQueryOptions(
    nickname,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getCheckNicknameAvailabilitySuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof checkNicknameAvailability>>,
  TError = unknown,
>(
  nickname: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof checkNicknameAvailability>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCheckNicknameAvailabilityQueryKey(nickname);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof checkNicknameAvailability>>
  > = ({ signal }) =>
    checkNicknameAvailability(nickname, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof checkNicknameAvailability>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CheckNicknameAvailabilitySuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof checkNicknameAvailability>>
>;
export type CheckNicknameAvailabilitySuspenseQueryError = unknown;

export function useCheckNicknameAvailabilitySuspense<
  TData = Awaited<ReturnType<typeof checkNicknameAvailability>>,
  TError = unknown,
>(
  nickname: string,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof checkNicknameAvailability>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCheckNicknameAvailabilitySuspense<
  TData = Awaited<ReturnType<typeof checkNicknameAvailability>>,
  TError = unknown,
>(
  nickname: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof checkNicknameAvailability>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCheckNicknameAvailabilitySuspense<
  TData = Awaited<ReturnType<typeof checkNicknameAvailability>>,
  TError = unknown,
>(
  nickname: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof checkNicknameAvailability>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÎãâÎÑ§ÏûÑ ÏÇ¨Ïö© Í∞ÄÎä• Ïó¨Î∂Ä ÌôïÏù∏
 */

export function useCheckNicknameAvailabilitySuspense<
  TData = Awaited<ReturnType<typeof checkNicknameAvailability>>,
  TError = unknown,
>(
  nickname: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof checkNicknameAvailability>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof http>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getCheckNicknameAvailabilitySuspenseQueryOptions(
    nickname,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
