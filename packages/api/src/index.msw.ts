/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * ÎÑàÍµ¨Îîî API
 * Íµ¨ÎÇ¥ÏãùÎãπ ÌîåÎû´Ìèº API
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import type { RequestHandlerOptions } from "msw";
import { delay, HttpResponse, http } from "msw";

import type {
  SendEmailVerificationCode200,
  SuccessResponseEmailVerifyResponse,
  SuccessResponseGetGoogleAuthorizeResponse,
  SuccessResponseGetKakaoAuthorizeResponse,
  SuccessResponseGetMyProfileResponse,
  SuccessResponseGetNaverAuthorizeResponse,
  SuccessResponseLocalLoginResponse,
  SuccessResponseLogoutResponse,
  SuccessResponseNicknameCheckResponse,
  SuccessResponseRefreshTokenResponse,
  SuccessResponseSignUpResponse,
  SuccessResponseSocialLoginResponse,
} from "./index.schemas";

export const getSignUpSocialResponseMock = (
  overrideResponse: Partial<SuccessResponseSignUpResponse> = {},
): SuccessResponseSignUpResponse => ({
  timestamp: faker.helpers.arrayElement([
    new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
    undefined,
  ]),
  success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  code: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  data: faker.helpers.arrayElement([
    {
      userId: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      email: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      nickname: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      accessToken: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      refreshToken: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      accessTokenExpiresAt: faker.helpers.arrayElement([
        new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
        undefined,
      ]),
      refreshTokenExpiresAt: faker.helpers.arrayElement([
        new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getSignUpLocalResponseMock = (
  overrideResponse: Partial<SuccessResponseSignUpResponse> = {},
): SuccessResponseSignUpResponse => ({
  timestamp: faker.helpers.arrayElement([
    new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
    undefined,
  ]),
  success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  code: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  data: faker.helpers.arrayElement([
    {
      userId: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      email: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      nickname: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      accessToken: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      refreshToken: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      accessTokenExpiresAt: faker.helpers.arrayElement([
        new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
        undefined,
      ]),
      refreshTokenExpiresAt: faker.helpers.arrayElement([
        new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getRefreshTokenResponseMock = (
  overrideResponse: Partial<SuccessResponseRefreshTokenResponse> = {},
): SuccessResponseRefreshTokenResponse => ({
  timestamp: faker.helpers.arrayElement([
    new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
    undefined,
  ]),
  success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  code: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  data: faker.helpers.arrayElement([
    {
      accessToken: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      refreshToken: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      accessTokenExpiresAt: faker.helpers.arrayElement([
        new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
        undefined,
      ]),
      refreshTokenExpiresAt: faker.helpers.arrayElement([
        new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getLogoutResponseMock = (
  overrideResponse: Partial<SuccessResponseLogoutResponse> = {},
): SuccessResponseLogoutResponse => ({
  timestamp: faker.helpers.arrayElement([
    new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
    undefined,
  ]),
  success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  code: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  data: faker.helpers.arrayElement([
    {
      logoutAt: faker.helpers.arrayElement([
        new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getNaverLoginResponseMock = (
  overrideResponse: Partial<SuccessResponseSocialLoginResponse> = {},
): SuccessResponseSocialLoginResponse => ({
  timestamp: faker.helpers.arrayElement([
    new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
    undefined,
  ]),
  success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  code: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  data: faker.helpers.arrayElement([
    {
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["EXISTING_USER", "NEW_USER"] as const),
        undefined,
      ]),
      userId: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      nickname: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      profileImageUrl: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      accessToken: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      refreshToken: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      accessTokenExpiresAt: faker.helpers.arrayElement([
        new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
        undefined,
      ]),
      refreshTokenExpiresAt: faker.helpers.arrayElement([
        new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
        undefined,
      ]),
      registrationToken: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      registrationTokenExpiresAt: faker.helpers.arrayElement([
        new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getLocalLoginResponseMock = (
  overrideResponse: Partial<SuccessResponseLocalLoginResponse> = {},
): SuccessResponseLocalLoginResponse => ({
  timestamp: faker.helpers.arrayElement([
    new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
    undefined,
  ]),
  success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  code: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  data: faker.helpers.arrayElement([
    {
      userId: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      email: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      nickname: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      profileImageUrl: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      accessToken: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      refreshToken: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      accessTokenExpiresAt: faker.helpers.arrayElement([
        new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
        undefined,
      ]),
      refreshTokenExpiresAt: faker.helpers.arrayElement([
        new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getKakaoLoginResponseMock = (
  overrideResponse: Partial<SuccessResponseSocialLoginResponse> = {},
): SuccessResponseSocialLoginResponse => ({
  timestamp: faker.helpers.arrayElement([
    new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
    undefined,
  ]),
  success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  code: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  data: faker.helpers.arrayElement([
    {
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["EXISTING_USER", "NEW_USER"] as const),
        undefined,
      ]),
      userId: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      nickname: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      profileImageUrl: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      accessToken: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      refreshToken: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      accessTokenExpiresAt: faker.helpers.arrayElement([
        new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
        undefined,
      ]),
      refreshTokenExpiresAt: faker.helpers.arrayElement([
        new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
        undefined,
      ]),
      registrationToken: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      registrationTokenExpiresAt: faker.helpers.arrayElement([
        new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGoogleLoginResponseMock = (
  overrideResponse: Partial<SuccessResponseSocialLoginResponse> = {},
): SuccessResponseSocialLoginResponse => ({
  timestamp: faker.helpers.arrayElement([
    new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
    undefined,
  ]),
  success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  code: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  data: faker.helpers.arrayElement([
    {
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["EXISTING_USER", "NEW_USER"] as const),
        undefined,
      ]),
      userId: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      nickname: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      profileImageUrl: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      accessToken: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      refreshToken: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      accessTokenExpiresAt: faker.helpers.arrayElement([
        new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
        undefined,
      ]),
      refreshTokenExpiresAt: faker.helpers.arrayElement([
        new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
        undefined,
      ]),
      registrationToken: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      registrationTokenExpiresAt: faker.helpers.arrayElement([
        new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getVerifyEmailCodeResponseMock = (
  overrideResponse: Partial<SuccessResponseEmailVerifyResponse> = {},
): SuccessResponseEmailVerifyResponse => ({
  timestamp: faker.helpers.arrayElement([
    new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
    undefined,
  ]),
  success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  code: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  data: faker.helpers.arrayElement([
    {
      verified: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getSendEmailVerificationCodeResponseMock = (
  overrideResponse: Partial<SendEmailVerificationCode200> = {},
): SendEmailVerificationCode200 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getCheckNicknameAvailabilityResponseMock = (
  overrideResponse: Partial<SuccessResponseNicknameCheckResponse> = {},
): SuccessResponseNicknameCheckResponse => ({
  timestamp: faker.helpers.arrayElement([
    new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
    undefined,
  ]),
  success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  code: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  data: faker.helpers.arrayElement([
    {
      nickname: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      available: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetMyProfileResponseMock = (
  overrideResponse: Partial<SuccessResponseGetMyProfileResponse> = {},
): SuccessResponseGetMyProfileResponse => ({
  timestamp: faker.helpers.arrayElement([
    new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
    undefined,
  ]),
  success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  code: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  data: faker.helpers.arrayElement([
    {
      profile: faker.helpers.arrayElement([
        {
          userId: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          nickname: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          profileImageUrl: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
          joinDate: faker.helpers.arrayElement([
            new Date(faker.date.past().toISOString().split("T")[0]),
            undefined,
          ]),
        },
        undefined,
      ]),
      account: faker.helpers.arrayElement([
        {
          provider: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              "LOCAL",
              "GOOGLE",
              "APPLE",
              "KAKAO",
              "NAVER",
            ] as const),
            undefined,
          ]),
          email: faker.helpers.arrayElement([
            faker.string.alpha({ length: { min: 10, max: 20 } }),
            undefined,
          ]),
        },
        undefined,
      ]),
      health: faker.helpers.arrayElement([
        {
          height: faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            undefined,
          ]),
          weight: faker.helpers.arrayElement([
            faker.number.float({
              min: undefined,
              max: undefined,
              fractionDigits: 2,
            }),
            undefined,
          ]),
        },
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetNaverAuthorizeUrlResponseMock = (
  overrideResponse: Partial<SuccessResponseGetNaverAuthorizeResponse> = {},
): SuccessResponseGetNaverAuthorizeResponse => ({
  timestamp: faker.helpers.arrayElement([
    new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
    undefined,
  ]),
  success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  code: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  data: faker.helpers.arrayElement([
    {
      authorizeUrl: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetKakaoAuthorizeUrlResponseMock = (
  overrideResponse: Partial<SuccessResponseGetKakaoAuthorizeResponse> = {},
): SuccessResponseGetKakaoAuthorizeResponse => ({
  timestamp: faker.helpers.arrayElement([
    new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
    undefined,
  ]),
  success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  code: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  data: faker.helpers.arrayElement([
    {
      authorizeUrl: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetGoogleAuthorizeUrlResponseMock = (
  overrideResponse: Partial<SuccessResponseGetGoogleAuthorizeResponse> = {},
): SuccessResponseGetGoogleAuthorizeResponse => ({
  timestamp: faker.helpers.arrayElement([
    new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
    undefined,
  ]),
  success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  code: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  data: faker.helpers.arrayElement([
    {
      authorizeUrl: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getSignUpSocialMockHandler = (
  overrideResponse?:
    | SuccessResponseSignUpResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<SuccessResponseSignUpResponse>
        | SuccessResponseSignUpResponse),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/api/v1/auth/signup/social",
    async (info) => {
      await delay(500);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getSignUpSocialResponseMock(),
        ),
        { status: 201, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getSignUpLocalMockHandler = (
  overrideResponse?:
    | SuccessResponseSignUpResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<SuccessResponseSignUpResponse>
        | SuccessResponseSignUpResponse),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/api/v1/auth/signup/local",
    async (info) => {
      await delay(500);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getSignUpLocalResponseMock(),
        ),
        { status: 201, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getRefreshTokenMockHandler = (
  overrideResponse?:
    | SuccessResponseRefreshTokenResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<SuccessResponseRefreshTokenResponse>
        | SuccessResponseRefreshTokenResponse),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/api/v1/auth/refresh",
    async (info) => {
      await delay(500);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getRefreshTokenResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getLogoutMockHandler = (
  overrideResponse?:
    | SuccessResponseLogoutResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<SuccessResponseLogoutResponse>
        | SuccessResponseLogoutResponse),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/api/v1/auth/logout",
    async (info) => {
      await delay(500);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getLogoutResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getNaverLoginMockHandler = (
  overrideResponse?:
    | SuccessResponseSocialLoginResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<SuccessResponseSocialLoginResponse>
        | SuccessResponseSocialLoginResponse),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/api/v1/auth/login/naver",
    async (info) => {
      await delay(500);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getNaverLoginResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getLocalLoginMockHandler = (
  overrideResponse?:
    | SuccessResponseLocalLoginResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<SuccessResponseLocalLoginResponse>
        | SuccessResponseLocalLoginResponse),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/api/v1/auth/login/local",
    async (info) => {
      await delay(500);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getLocalLoginResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getKakaoLoginMockHandler = (
  overrideResponse?:
    | SuccessResponseSocialLoginResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<SuccessResponseSocialLoginResponse>
        | SuccessResponseSocialLoginResponse),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/api/v1/auth/login/kakao",
    async (info) => {
      await delay(500);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getKakaoLoginResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getGoogleLoginMockHandler = (
  overrideResponse?:
    | SuccessResponseSocialLoginResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<SuccessResponseSocialLoginResponse>
        | SuccessResponseSocialLoginResponse),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/api/v1/auth/login/google",
    async (info) => {
      await delay(500);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGoogleLoginResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getVerifyEmailCodeMockHandler = (
  overrideResponse?:
    | SuccessResponseEmailVerifyResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<SuccessResponseEmailVerifyResponse>
        | SuccessResponseEmailVerifyResponse),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/api/v1/auth/email/verify-code",
    async (info) => {
      await delay(500);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getVerifyEmailCodeResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getSendEmailVerificationCodeMockHandler = (
  overrideResponse?:
    | SendEmailVerificationCode200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<SendEmailVerificationCode200>
        | SendEmailVerificationCode200),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/api/v1/auth/email/send-code",
    async (info) => {
      await delay(500);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getSendEmailVerificationCodeResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getCheckNicknameAvailabilityMockHandler = (
  overrideResponse?:
    | SuccessResponseNicknameCheckResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<SuccessResponseNicknameCheckResponse>
        | SuccessResponseNicknameCheckResponse),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/api/v1/users/nickname/availability",
    async (info) => {
      await delay(500);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getCheckNicknameAvailabilityResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getGetMyProfileMockHandler = (
  overrideResponse?:
    | SuccessResponseGetMyProfileResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<SuccessResponseGetMyProfileResponse>
        | SuccessResponseGetMyProfileResponse),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/api/v1/users/me",
    async (info) => {
      await delay(500);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetMyProfileResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getGetNaverAuthorizeUrlMockHandler = (
  overrideResponse?:
    | SuccessResponseGetNaverAuthorizeResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<SuccessResponseGetNaverAuthorizeResponse>
        | SuccessResponseGetNaverAuthorizeResponse),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/api/v1/auth/login/naver/authorize-url",
    async (info) => {
      await delay(500);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetNaverAuthorizeUrlResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getGetKakaoAuthorizeUrlMockHandler = (
  overrideResponse?:
    | SuccessResponseGetKakaoAuthorizeResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<SuccessResponseGetKakaoAuthorizeResponse>
        | SuccessResponseGetKakaoAuthorizeResponse),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/api/v1/auth/login/kakao/authorize-url",
    async (info) => {
      await delay(500);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetKakaoAuthorizeUrlResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getGetGoogleAuthorizeUrlMockHandler = (
  overrideResponse?:
    | SuccessResponseGetGoogleAuthorizeResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<SuccessResponseGetGoogleAuthorizeResponse>
        | SuccessResponseGetGoogleAuthorizeResponse),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/api/v1/auth/login/google/authorize-url",
    async (info) => {
      await delay(500);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetGoogleAuthorizeUrlResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};
export const getApiMock = () => [
  getSignUpSocialMockHandler(),
  getSignUpLocalMockHandler(),
  getRefreshTokenMockHandler(),
  getLogoutMockHandler(),
  getNaverLoginMockHandler(),
  getLocalLoginMockHandler(),
  getKakaoLoginMockHandler(),
  getGoogleLoginMockHandler(),
  getVerifyEmailCodeMockHandler(),
  getSendEmailVerificationCodeMockHandler(),
  getCheckNicknameAvailabilityMockHandler(),
  getGetMyProfileMockHandler(),
  getGetNaverAuthorizeUrlMockHandler(),
  getGetKakaoAuthorizeUrlMockHandler(),
  getGetGoogleAuthorizeUrlMockHandler(),
];
