/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * ÎÑàÍµ¨Îîî API
 * Íµ¨ÎÇ¥ÏãùÎãπ ÌîåÎû´Ìèº API
 * OpenAPI spec version: v1
 */
import { faker } from "@faker-js/faker";

import { delay, HttpResponse, http } from "msw";

import type {
  SendEmailVerificationCode200,
  SuccessResponseEmailVerifyResponse,
  SuccessResponseSignUpResponse,
} from "./index.schemas";

export const getSignUpLocalResponseMock = (
  overrideResponse: Partial<SuccessResponseSignUpResponse> = {},
): SuccessResponseSignUpResponse => ({
  timestamp: faker.helpers.arrayElement([
    new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
    undefined,
  ]),
  success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  data: faker.helpers.arrayElement([
    {
      userId: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      message: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getVerifyEmailCodeResponseMock = (
  overrideResponse: Partial<SuccessResponseEmailVerifyResponse> = {},
): SuccessResponseEmailVerifyResponse => ({
  timestamp: faker.helpers.arrayElement([
    new Date(`${faker.date.past().toISOString().split(".")[0]}Z`),
    undefined,
  ]),
  success: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  data: faker.helpers.arrayElement([
    {
      verified: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      message: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
    },
    undefined,
  ]),
  ...overrideResponse,
});

export const getSendEmailVerificationCodeResponseMock = (
  overrideResponse: Partial<SendEmailVerificationCode200> = {},
): SendEmailVerificationCode200 => ({
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getSignUpLocalMockHandler = (
  overrideResponse?:
    | SuccessResponseSignUpResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<SuccessResponseSignUpResponse>
        | SuccessResponseSignUpResponse),
) => {
  return http.post("*/api/v1/auth/signup/local", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSignUpLocalResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getVerifyEmailCodeMockHandler = (
  overrideResponse?:
    | SuccessResponseEmailVerifyResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<SuccessResponseEmailVerifyResponse>
        | SuccessResponseEmailVerifyResponse),
) => {
  return http.post("*/api/v1/auth/email/verify-code", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getVerifyEmailCodeResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSendEmailVerificationCodeMockHandler = (
  overrideResponse?:
    | SendEmailVerificationCode200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<SendEmailVerificationCode200>
        | SendEmailVerificationCode200),
) => {
  return http.post("*/api/v1/auth/email/send-code", async (info) => {
    await delay(500);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSendEmailVerificationCodeResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getApiMock = () => [
  getSignUpLocalMockHandler(),
  getVerifyEmailCodeMockHandler(),
  getSendEmailVerificationCodeMockHandler(),
];
