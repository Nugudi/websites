import { vars } from "@nugudi/themes";
import { clsx } from "clsx";
import * as React from "react";
import { BaseStyle, StyleSprinkles } from "../core/style.css";
import type { GridProps } from "./types";

const Grid = (props: GridProps, ref: React.Ref<HTMLElement>) => {
  const {
    as = "div",
    color,
    background,
    children,
    autoColumns,
    autoFlow,
    autoRows,
    columnGap,
    column,
    gap,
    row,
    rowGap,
    templateColumns,
    templateRows,
    templateAreas,
    // Width and height properties with shorthands
    width,
    w,
    height,
    h,
    maxWidth,
    maxW,
    minWidth,
    minW,
    maxHeight,
    maxH,
    minHeight,
    minH,
    size,
    maxSize,
    minSize,
    sizeX,
    sizeY,
    // Margin and padding properties with shorthands
    m,
    margin,
    marginTop,
    marginRight,
    marginBottom,
    marginLeft,
    mt,
    mr,
    mb,
    ml,
    mX,
    mY,
    p,
    padding,
    paddingTop,
    paddingRight,
    paddingBottom,
    paddingLeft,
    pt,
    pr,
    pb,
    pl,
    pX,
    pY,
    // Other style properties
    borderRadius,
    boxShadow,
    className,
    style,
    ...restProps
  } = props;

  const sprinkleProps = {
    // Width and height properties
    width,
    w,
    height,
    h,
    maxWidth,
    maxW,
    minWidth,
    minW,
    maxHeight,
    maxH,
    minHeight,
    minH,
    size,
    maxSize,
    minSize,
    sizeX,
    sizeY,
    // Margin and padding properties
    m,
    margin,
    marginTop,
    marginRight,
    marginBottom,
    marginLeft,
    mt,
    mr,
    mb,
    ml,
    mX,
    mY,
    p,
    padding,
    paddingTop,
    paddingRight,
    paddingBottom,
    paddingLeft,
    pt,
    pr,
    pb,
    pl,
    pX,
    pY,
    // Other style properties
    borderRadius,
    boxShadow,
  };

  return React.createElement(
    as,
    {
      ...restProps,
      ref,
      className: clsx([BaseStyle, StyleSprinkles(sprinkleProps), className]),
      style: {
        display: "grid",
        gridAutoColumns: autoColumns,
        gridAutoFlow: autoFlow,
        gridAutoRows: autoRows,
        gridColumnGap: columnGap,
        gridGap: gap,
        gridRowGap: rowGap,
        gridTemplateColumns: templateColumns,
        gridTemplateRows: templateRows,
        gridTemplateAreas: templateAreas,
        gridColumn: column,
        gridRow: row,
        color: color && vars.colors.$scale?.[color]?.[500],
        background: background && vars.colors.$scale?.[background]?.[100],
        ...style,
      },
    },
    children,
  );
};

const _Grid = React.forwardRef(Grid);
export { _Grid as Grid };
