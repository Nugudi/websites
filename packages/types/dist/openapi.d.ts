/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/reviews": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 식단표 리뷰 작성
         * @description 구내식당의 특정 날짜 식단표에 대한 리뷰를 작성합니다.
         *
         *     **주요 기능:**
         *     - 구내식당 식단표에 대한 리뷰 작성
         *     - 텍스트 리뷰는 필수 (10자 이상 1000자 이하)
         *     - 이미지는 선택 사항
         *     - 맛 평가 타입 선택 필수
         *
         *     **제약 사항:**
         *     - 한 사용자는 같은 날짜, 같은 식당, 같은 식사 타입(아침, 점심, 저녁)에 대해 하나의 리뷰만 작성 가능 (DB 유니크 제약 조건으로 보장)
         *     - 리뷰 작성 가능 기간: **오늘로부터 최근 7일 이내**
         *       - 예: 오늘이 10월 26일(일)이면, 10월 20일(월) ~ 10월 26일(일) 사이의 날짜만 가능
         *       - 7일이 지난 과거 날짜나 미래 날짜는 리뷰 작성 불가
         *
         *     **검증:**
         *     - 식당이 존재하고 활성화되어 있어야 함
         *     - 해당 날짜에 해당 식사 타입의 식단표가 등록되어 있어야 함
         *     - 맛 평가 타입이 존재하고 활성화되어 있어야 함
         *     - 리뷰 날짜가 최근 7일 이내여야 함
         *
         *     **에러 케이스:**
         *     - 존재하지 않는 식당: 404 NOT_FOUND
         *     - 해당 날짜에 식단표 없음: 404 NOT_FOUND
         *     - 존재하지 않는 맛 평가 타입: 404 NOT_FOUND
         *     - 비활성화된 맛 평가 타입: 400 BAD_REQUEST
         *     - 이미 리뷰 작성함 (중복): 409 CONFLICT
         *     - 리뷰 작성 가능 기간 초과 (7일 이상 지난 날짜): 400 BAD_REQUEST
         *     - 유효하지 않은 입력값: 400 BAD_REQUEST
         */
        post: operations["createReview"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reviews/{reviewId}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 리뷰 댓글 리스트 조회 (무한 스크롤)
         * @description 리뷰의 댓글 목록을 무한 스크롤로 조회합니다.
         *
         *     **주요 기능:**
         *     - 리뷰의 최상위 댓글 목록 조회 (대댓글 내용은 포함하지 않음)
         *     - 각 댓글의 대댓글 개수 메타 정보 제공
         *     - 커서 기반 무한 스크롤 (오래된 순서로 정렬)
         *     - 로그인하지 않은 사용자도 조회 가능
         *
         *     **삭제된 댓글 처리:**
         *     - 삭제된 댓글도 목록에 표시됨 (스레드 구조 유지)
         *     - 댓글 상태(commentStatus)에 따라 다른 메시지 표시:
         *       - ACTIVE: 원본 댓글 내용
         *       - USER_DELETED: "사용자가 삭제한 댓글입니다"
         *       - OWNER_WITHDRAWN: "탈퇴한 사용자의 댓글입니다"
         *       - ADMIN_DELETED: "관리자에 의해 삭제된 댓글입니다"
         *       - BLOCKED: "차단된 댓글입니다"
         *       - REPORTED: "신고 검토중인 댓글입니다"
         *
         *     **대댓글 메타 정보:**
         *     - totalReplyCount: 해당 댓글의 전체 대댓글 개수
         *     - hasReplies: 대댓글 존재 여부
         *     - 대댓글 내용은 별도 "대댓글 조회" API로 로드 (추후 구현 예정)
         *
         *     **작성자 확인:**
         *     - 로그인한 사용자는 본인이 작성한 댓글을 isAuthor=true로 확인 가능
         *     - 로그인하지 않은 사용자는 모든 댓글의 isAuthor=false
         *
         *     **수정 여부 확인:**
         *     - createdAt과 updatedAt 비교로 수정 여부 판단
         *     - createdAt !== updatedAt이면 수정된 댓글
         *     - 수정되지 않은 경우 createdAt === updatedAt
         *
         *     **정렬 순서:**
         *     - 댓글: 오래된 순서 (id ASC)
         *
         *     **페이징 사용법:**
         *     1. 첫 페이지: `GET /api/v1/reviews/{reviewId}/comments?size=20`
         *     2. 다음 페이지: `cursor`에 응답의 `pageInfo.nextCursor` 전달
         *        - 예: `GET /api/v1/reviews/{reviewId}/comments?cursor=123&size=20`
         *
         *     **응답 구조:**
         *     ```json
         *     {
         *       "data": [
         *         {
         *           "comment": {
         *             "commentId": 1,
         *             "content": "맛있어 보이네요!",
         *             "commentStatus": "ACTIVE",
         *             "createdAt": "2025-10-26T10:30:00",
         *             "updatedAt": "2025-10-26T10:30:00",
         *             "isAuthor": true
         *           },
         *           "author": {
         *             "userId": 123,
         *             "nickname": "맛집탐험가",
         *             "profileImageUrl": null
         *           },
         *           "replyMetadata": {
         *             "totalReplyCount": 15,
         *             "hasReplies": true
         *           }
         *         }
         *       ],
         *       "pageInfo": {
         *         "nextCursor": "20",
         *         "hasNext": true
         *       }
         *     }
         *     ```
         *     **참고:**
         *     - 대댓글 내용은 이 API에 포함되지 않음
         *     - 대댓글 조회 API: `GET /api/v1/comments/{commentId}/replies`
         */
        get: operations["getReviewComments"];
        put?: never;
        /**
         * 리뷰 댓글 작성
         * @description 리뷰에 댓글 또는 대댓글을 작성합니다.
         *
         *     **주요 기능:**
         *     - 리뷰에 댓글 작성 가능
         *     - 댓글에 대댓글 작성 가능
         *     - 댓글 내용은 필수 (1자 이상 500자 이하)
         *
         *     **댓글 vs 대댓글:**
         *     - 일반 댓글: parentCommentId를 null로 전송
         *     - 대댓글: parentCommentId에 부모 댓글 ID 전송
         *
         *     **제약 사항:**
         *     - 대댓글은 1단계만 허용 (대댓글의 대댓글 불가)
         *     - 삭제된 리뷰에는 댓글 작성 불가
         *     - 삭제된 댓글에는 대댓글 작성 불가
         *
         *     **검증:**
         *     - 리뷰가 존재하고 삭제되지 않았어야 함
         *     - 대댓글 작성 시:
         *       - 부모 댓글이 존재하고 삭제되지 않았어야 함
         *       - 부모 댓글이 같은 리뷰에 속해야 함
         *       - 부모 댓글이 일반 댓글이어야 함 (대댓글의 대댓글 방지)
         *
         *     **응답:**
         *     - 생성된 댓글 ID만 반환
         *
         *     **에러 케이스:**
         *     - 존재하지 않는 리뷰: 404 NOT_FOUND
         *     - 삭제된 리뷰: 400 BAD_REQUEST
         *     - 존재하지 않는 부모 댓글: 404 NOT_FOUND
         *     - 삭제된 부모 댓글: 400 BAD_REQUEST
         *     - 부모 댓글이 다른 리뷰에 속함: 400 BAD_REQUEST
         *     - 대댓글의 대댓글 시도: 400 BAD_REQUEST
         *     - 유효하지 않은 입력값: 400 BAD_REQUEST
         */
        post: operations["createReviewComment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/signup/social": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 소셜 계정 회원가입
         * @description 소셜 로그인으로 인증에 성공한 신규 회원의 회원가입을 진행합니다.
         *
         *     **사용 방법:**
         *     1. 카카오 로그인(/api/v1/auth/login/kakao) 호출
         *     2. 신규 회원인 경우 202 상태와 함께 registrationToken 수신
         *     3. X-Registration-Token 헤더에, 받은 토큰을 포함하여 본 API 호출
         *     4. 필수 정보(닉네임 등)를 요청 바디에 포함
         *     5. 회원가입 성공 시 accessToken과 refreshToken을 응답 바디로 반환
         *
         *     **주의사항:**
         *     - registrationToken은 30분간 유효
         *     - 토큰 만료 시 카카오 로그인부터 다시 진행
         */
        post: operations["signUpSocial"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/signup/local": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 일반 회원가입
         * @description 이메일과 비밀번호를 사용한 일반 회원가입을 진행합니다.
         *
         *     **회원가입 성공 시:**
         *     - 자동으로 로그인 처리
         *     - accessToken과 refreshToken을 응답 바디에 반환
         *
         *     **반환되는 토큰:**
         *     - accessToken: API 호출 시 Authorization 헤더에 Bearer 형식으로 사용
         *     - refreshToken: 토큰 갱신 시 사용
         *     - 사용자 정보 (userId, email, nickname 등)
         *
         *     **디바이스 관리:**
         *     - 다중 기기 로그인 지원을 위해 X-Device-ID 헤더를 선택적으로 전송 가능
         *     - 프론트엔드에서 UUID 생성 후 로컬 스토리지에 저장하여 사용 권장
         *
         *     **사전 요구사항:**
         *     - 이메일 인증 완료 (/api/v1/auth/email/verify-code)
         */
        post: operations["signUpLocal"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * JWT 토큰 갱신
         * @description 리프레시 토큰으로 새로운 토큰을 발급받습니다.
         *
         *     **필수 헤더:**
         *     - Authorization: Bearer {refreshToken} 형식으로 리프레시 토큰 전달
         *     - X-Device-ID: 토큰을 갱신할 디바이스의 고유 ID
         *
         *     **디바이스 ID 관리:**
         *     - 로그인 시 사용한 동일한 디바이스 ID를 전달해야 함
         *     - 다른 디바이스 ID로 갱신 시도 시 실패
         *
         *     **반환 내용:**
         *     - 새로운 accessToken과 refreshToken
         */
        post: operations["refreshToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 로그아웃
         * @description 현재 기기에서 로그아웃합니다.
         *
         *     **필수 헤더:**
         *     - Authorization: Bearer {accessToken} - 현재 사용 중인 액세스 토큰
         *     - X-Refresh-Token: 현재 디바이스의 리프레시 토큰
         *     - X-Device-ID: 로그인 시 사용한 디바이스 고유 ID
         *
         *     **디바이스 ID 관리:**
         *     - 프론트엔드에서 UUID.randomUUID() 등으로 생성
         *     - 웹: localStorage, 모바일 앱: SecureStorage 등에 저장
         *     - 로그인 시 생성/저장한 동일한 ID를 로그아웃 시에도 사용
         *
         *     **동작 방식:**
         *     - 해당 디바이스의 세션만 종료 (다른 기기는 유지)
         *     - 액세스 토큰은 블랙리스트에 추가
         *     - 리프레시 토큰은 무효화
         */
        post: operations["logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/login/naver": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 네이버 소셜 로그인
         * @description 네이버로부터 전달받은 인가 코드와 redirect URI를 백엔드에 전달하여 로그인을 처리합니다.
         *
         *     **사용 방법:**
         *     1. 인가 URL 조회 API로 redirect_uri를 포함한 네이버 인증 URL 획득
         *     2. 사용자를 네이버 로그인 페이지로 리다이렉트
         *     3. 네이버 인증 완료 후 프론트엔드 redirect_uri로 인가 코드(code) 수신
         *     4. 이 API에 code와 동일한 redirect_uri를 함께 전달
         *
         *     **반환 상태:**
         *     - 기존 회원 (200 OK): accessToken과 refreshToken을 응답 바디에 반환
         *     - 신규 회원 (202 ACCEPTED): registrationToken을 응답 바디에 반환
         *
         *     **신규 회원의 경우:**
         *     1. 반환받은 registrationToken을 저장
         *     2. /api/v1/auth/signup/social 엔드포인트 호출 시 X-Registration-Token 헤더에 해당 토큰을 포함
         *     3. 추가 정보(닉네임 등) 입력 후 회원가입 완료
         *
         *     **주의사항:**
         *     - redirect_uri는 인가 URL 조회 시 사용한 값과 정확히 일치해야 합니다
         *     - 불일치 시 네이버 API 호출이 실패합니다
         */
        post: operations["naverLogin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/login/local": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 일반 로그인
         * @description 이메일과 비밀번호로 로그인합니다.
         *
         *     **반환 내용:**
         *     - accessToken: API 호출 시 Authorization 헤더에 Bearer 형식으로 사용
         *     - refreshToken: 토큰 갱신 시 사용, 안전하게 저장 필요
         *     - 사용자 정보 (userId, email, nickname 등)
         *
         *     **디바이스 관리:**
         *     - 다중 기기 로그인 지원을 위해 X-Device-ID 헤더를 선택적으로 전송 가능
         *     - 프론트엔드에서 UUID 생성 후 로컬 스토리지에 저장하여 사용 권장
         */
        post: operations["localLogin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/login/kakao": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 카카오 소셜 로그인
         * @description 카카오로부터 전달받은 인가 코드와 redirect URI를 백엔드에 전달하여 로그인을 처리합니다.
         *
         *     **사용 방법:**
         *     1. 인가 URL 조회 API로 redirect_uri를 포함한 카카오 인증 URL 획득
         *     2. 사용자를 카카오 로그인 페이지로 리다이렉트
         *     3. 카카오 인증 완료 후 프론트엔드 redirect_uri로 인가 코드(code) 수신
         *     4. 이 API에 code와 동일한 redirect_uri를 함께 전달
         *
         *     **반환 상태:**
         *     - 기존 회원 (200 OK): accessToken과 refreshToken을 응답 바디에 반환
         *     - 신규 회원 (202 ACCEPTED): registrationToken을 응답 바디에 반환
         *
         *     **신규 회원의 경우:**
         *     1. 반환받은 registrationToken을 저장
         *     2. /api/v1/auth/signup/social 엔드포인트 호출 시 X-Registration-Token 헤더에 해당 토큰을 포함
         *     3. 추가 정보(닉네임 등) 입력 후 회원가입 완료
         *
         *     **주의사항:**
         *     - redirect_uri는 인가 URL 조회 시 사용한 값과 정확히 일치해야 합니다
         *     - 불일치 시 카카오 API 호출이 실패합니다
         */
        post: operations["kakaoLogin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/login/google": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 구글 소셜 로그인
         * @description 구글로부터 전달받은 인가 코드와 redirect URI를 백엔드에 전달하여 로그인을 처리합니다.
         *
         *     **사용 방법:**
         *     1. 인가 URL 조회 API로 redirect_uri를 포함한 구글 인증 URL 획득
         *     2. 사용자를 구글 로그인 페이지로 리다이렉트
         *     3. 구글 인증 완료 후 프론트엔드 redirect_uri로 인가 코드(code) 수신
         *     4. 이 API에 code와 동일한 redirect_uri를 함께 전달
         *
         *     **반환 상태:**
         *     - 기존 회원 (200 OK): accessToken과 refreshToken을 응답 바디에 반환
         *     - 신규 회원 (202 ACCEPTED): registrationToken을 응답 바디에 반환
         *
         *     **신규 회원의 경우:**
         *     1. 반환받은 registrationToken을 저장
         *     2. /api/v1/auth/signup/social 엔드포인트 호출 시 X-Registration-Token 헤더에 해당 토큰을 포함
         *     3. 추가 정보(닉네임 등) 입력 후 회원가입 완료
         *
         *     **주의사항:**
         *     - redirect_uri는 인가 URL 조회 시 사용한 값과 정확히 일치해야 합니다
         *     - 불일치 시 구글 API 호출이 실패합니다
         */
        post: operations["googleLogin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/email/verify-code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 이메일 인증 코드 확인
         * @description 발송된 6자리 인증 코드를 확인합니다.
         *
         *     **인증 성공 시:**
         *     - 해당 이메일이 인증 완료 상태로 변경
         *     - isVerified: true 반환
         *
         *     **인증 후 가능한 작업:**
         *     - SIGNUP 목적: /api/v1/auth/signup/local로 회원가입 진행
         *     - RESET_PASSWORD 목적: 비밀번호 재설정 API 호출
         *
         *     **주의사항:**
         *     - 코드는 5분 내에 입력해야 함
         *     - 3회 이상 잘못된 코드 입력 시 새로운 코드 발송 필요
         *     - 인증 완료 후 30분 내에 회원가입/비밀번호 재설정을 완료해야 함
         */
        post: operations["verifyEmailCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/email/send-code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 이메일 인증 코드 발송
         * @description 6자리 인증 코드를 이메일로 발송합니다.
         *
         *     **사용 목적(purpose):**
         *     - SIGNUP: 회원가입 시 이메일 소유 확인
         *     - RESET_PASSWORD: 비밀번호 재설정 시 본인 확인
         *
         *     **재전송이 필요한 경우:**
         *     - 이메일을 받지 못한 경우 (스팸함 확인 필요)
         *     - 5분이 지나 코드가 만료된 경우
         *     - 3회 이상 잘못된 코드를 입력한 경우
         *     - 기존 코드를 분실한 경우
         *
         *     **재전송 시 동작:**
         *     - 기존 코드는 즉시 무효화됨
         *     - 새로운 6자리 코드가 생성되어 발송됨
         *     - 새 코드로만 인증 가능 (이전 코드 사용 불가)
         *
         *     **제한 사항:**
         *     - 동일 이메일로 1시간 내 최대 5회 발송 가능
         *     - 재전송은 마지막 코드 발송으로부터 1분 후 재전송 가능 (쿨다운 시간)
         *     - 인증 코드는 5분간 유효
         *
         *     **발송 후 프로세스:**
         *     1. 이메일로 전송된 6자리 코드 확인
         *     2. /api/v1/auth/email/verify-code로 코드 검증
         *     3. 회원가입 또는 비밀번호 재설정 진행
         */
        post: operations["sendEmailVerificationCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/cafeterias": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 구내식당 등록
         * @description 새로운 구내식당을 등록합니다.
         *
         *     **필수 정보:**
         *     - 이름 (2~100자)
         *     - 주소 (최대 255자)
         *     - 상세 주소 (최대 100자)
         *     - 영업 요일 (businessHours.operatingDays)
         *     - 포장 가능 여부 (takeoutAvailable)
         *
         *     **선택 정보:**
         *     - 위도/경도
         *     - 전화번호 (형식: 02-1234-5678)
         *     - 설명 (최대 1000자)
         *     - 한 줄 소개 (최대 200자)
         *     - 식권 가격 (0~50,000원)
         *     - 대표 이미지 파일 ID
         *     - 영업시간 정보 (businessHours)
         *       - 점심 시간 (lunchStartTime, lunchEndTime)
         *       - 저녁 시간 (dinnerStartTime, dinnerEndTime)
         *       - 특별 휴무일 (specialHolidays)
         *       - 비고 (note)
         *
         *     **등록 완료 시:**
         *     - 구내식당 ID 반환
         *     - 등록된 모든 정보 반환
         *     - 생성 일시 반환
         */
        post: operations["registerCafeteria"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/cafeterias/menus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 식단표 등록
         * @description 특정 구내식당의 특정 날짜의 식단표를 등록합니다.
         *
         *     **필수 정보:**
         *     - 구내식당 ID
         *     - 식단 날짜
         *     - 식사 시간대 (BREAKFAST, LUNCH, DINNER)
         *     - 메뉴 항목 목록 (1~30개)
         *
         *     **선택 정보:**
         *     - 가격 (0~50,000원)
         *     - 메뉴 이미지 파일 ID
         *     - 특이사항 (최대 200자)
         *
         *     **중복 검증:**
         *     - 동일한 구내식당의 동일한 날짜, 동일한 식사 시간대에는 하나의 식단표만 등록 가능
         *     - 예: 2025-10-09 점심 식단표가 이미 있으면 같은 날짜 점심 식단표 추가 등록 불가
         *
         *     **등록 완료 시:**
         *     - 식단표 ID 반환
         *     - 자동 계산된 총 칼로리 반환
         *     - 등록된 모든 정보 반환
         */
        post: operations["registerCafeteriaMenu"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/comments/{commentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 댓글 삭제
         * @description 댓글(또는 대댓글)을 삭제합니다.
         *
         *     **주요 기능:**
         *     - 본인이 작성한 댓글/대댓글만 삭제 가능
         *     - Soft Delete 방식으로 삭제 (실제 데이터는 유지, 삭제 표시)
         *     - 댓글 상태(commentStatus)를 USER_DELETED로 변경
         *     - 삭제 시간(deletedAt) 자동 기록
         *
         *     **삭제 후 처리:**
         *     - 삭제된 댓글은 목록에서 "사용자가 삭제한 댓글입니다"로 표시됨
         *     - 삭제된 댓글에 달린 대댓글은 유지됨 (스레드 구조 유지)
         *     - 삭제된 댓글은 수정 불가
         *
         *     **제약 사항:**
         *     - 본인이 작성한 댓글만 삭제 가능 (다른 사용자 댓글 삭제 시도 시 403 Forbidden)
         *     - 이미 삭제된 댓글은 다시 삭제 불가 (404 NOT_FOUND)
         *     - JWT 인증 필수
         *
         *     **응답:**
         *     - 삭제된 댓글 ID 반환
         *
         *     **에러 케이스:**
         *     - 존재하지 않는 댓글 또는 이미 삭제된 댓글: 404 NOT_FOUND
         *     - 본인이 작성하지 않은 댓글: 403 FORBIDDEN
         *     - 차단된 댓글: 403 FORBIDDEN
         *     - 신고 검토중인 댓글: 403 FORBIDDEN
         *     - JWT 미제공 또는 유효하지 않음: 401 UNAUTHORIZED
         */
        delete: operations["deleteComment"];
        options?: never;
        head?: never;
        /**
         * 댓글 수정
         * @description 댓글(또는 대댓글)을 수정합니다.
         *
         *     **주요 기능:**
         *     - 본인이 작성한 댓글/대댓글만 수정 가능
         *     - 댓글 내용 수정 (1자 이상 500자 이하)
         *     - 수정 시간(updatedAt) 자동 업데이트
         *
         *     **제약 사항:**
         *     - 본인이 작성한 댓글만 수정 가능 (다른 사용자 댓글 수정 시도 시 403 Forbidden)
         *     - 삭제된 댓글은 수정 불가
         *     - JWT 인증 필수
         *
         *     **응답:**
         *     - 수정된 댓글 ID, 내용, 수정 시간 반환
         *
         *     **에러 케이스:**
         *     - 존재하지 않는 댓글: 404 NOT_FOUND
         *     - 삭제된 댓글: 400 BAD_REQUEST
         *     - 본인이 작성하지 않은 댓글: 403 FORBIDDEN
         *     - 차단된 댓글: 403 FORBIDDEN
         *     - 신고 검토중인 댓글: 403 FORBIDDEN
         *     - 유효하지 않은 입력값: 400 BAD_REQUEST
         *     - JWT 미제공 또는 유효하지 않음: 401 UNAUTHORIZED
         */
        patch: operations["updateComment"];
        trace?: never;
    };
    "/api/v1/users/nickname/availability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 닉네임 사용 가능 여부 확인
         * @description 회원가입 시 닉네임 중복 여부를 확인합니다.
         *
         *     **검증 규칙:**
         *     - 길이: 2~12자
         *     - 허용 문자: 한글, 영문(대소문자), 숫자만 가능
         *     - 특수문자, 공백, 이모지 사용 불가
         *     - 중복 체크 (이미 사용 중인 닉네임 차단)
         *
         *     **반환 값:**
         *     - isAvailable: true (사용 가능) / false (사용 불가)
         *     - nickname: 검증한 닉네임
         *     - message: 사용 불가 시 구체적인 사유
         */
        get: operations["checkNicknameAvailability"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 내 프로필 조회
         * @description 로그인한 유저 본인의 프로필을 조회합니다.
         *
         *     **필수 헤더:**
         *     - Authorization: Bearer {accessToken}
         *
         *     **반환 정보:**
         *     - 사용자 기본 정보 (userId, email, nickname 등)
         *     - 프로필 이미지
         *     - 가입일
         */
        get: operations["getMyProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/comments/{commentId}/replies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 대댓글 리스트 조회 (무한 스크롤)
         * @description 특정 댓글의 대댓글 목록을 무한 스크롤로 조회합니다.
         *
         *     **주요 기능:**
         *     - 부모 댓글의 대댓글 목록 조회
         *     - 커서 기반 무한 스크롤 (오래된 순서로 정렬)
         *     - 로그인하지 않은 사용자도 조회 가능
         *
         *     **삭제된 대댓글 처리:**
         *     - 삭제된 대댓글도 목록에 표시됨 (스레드 구조 유지)
         *     - 댓글 상태(commentStatus)에 따라 다른 메시지 표시:
         *       - ACTIVE: 원본 댓글 내용
         *       - USER_DELETED: "사용자가 삭제한 댓글입니다"
         *       - OWNER_WITHDRAWN: "탈퇴한 사용자의 댓글입니다"
         *       - ADMIN_DELETED: "관리자에 의해 삭제된 댓글입니다"
         *       - BLOCKED: "차단된 댓글입니다"
         *       - REPORTED: "신고 검토중인 댓글입니다"
         *
         *     **작성자 확인:**
         *     - 로그인한 사용자는 본인이 작성한 대댓글을 isAuthor=true로 확인 가능
         *     - 로그인하지 않은 사용자는 모든 대댓글의 isAuthor=false
         *
         *     **수정 여부 확인:**
         *     - createdAt과 updatedAt 비교로 수정 여부 판단
         *     - createdAt !== updatedAt이면 수정된 대댓글
         *     - 수정되지 않은 경우 createdAt === updatedAt
         *
         *     **정렬 순서:**
         *     - 대댓글: 오래된 순서 (id ASC)
         *
         *     **페이징 사용법:**
         *     1. 첫 페이지: `GET /api/v1/comments/{commentId}/replies?size=20`
         *     2. 다음 페이지: `cursor`에 응답의 `pageInfo.nextCursor` 전달
         *        - 예: `GET /api/v1/comments/{commentId}/replies?cursor=456&size=20`
         *
         *     **응답 구조:**
         *     ```json
         *     {
         *       "data": [
         *         {
         *           "comment": {
         *             "commentId": 456,
         *             "content": "동의합니다!",
         *             "commentStatus": "ACTIVE",
         *             "createdAt": "2025-10-26T10:32:00",
         *             "updatedAt": "2025-10-26T10:32:00",
         *             "isAuthor": false
         *           },
         *           "author": {
         *             "userId": 789,
         *             "nickname": "음식평론가",
         *             "profileImageUrl": null
         *           }
         *         }
         *       ],
         *       "pageInfo": {
         *         "nextCursor": "460",
         *         "hasNext": true
         *       }
         *     }
         *     ```
         *     **참고:**
         *     - 이 API는 "대댓글 더보기" 버튼 클릭 시 호출됨
         *     - 댓글 목록 조회 API(`GET /api/v1/reviews/{reviewId}/comments`)에서는 대댓글 메타 정보만 제공
         */
        get: operations["getReplies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cafeterias": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 특정 날짜 구내식당 식단표 조회 (무한 스크롤)
         * @description 너구디에 등록된 구내식당 목록과 특정 날짜의 식단표를 조회합니다.
         *
         *     **주요 기능:**
         *     - 구내식당 기본 정보
         *     - 특정 날짜의 식단표 (menuItems, 칼로리, 가격 등)
         *     - 식단표가 없는 구내식당은 menu 필드가 null
         *
         *     **페이징:**
         *     - 커서 기반 무한 스크롤 지원
         *     - cursor: 다음 페이지를 조회하려면 이전 응답의 pageInfo.nextCursor 값 전달
         *     - size: 한 번에 조회할 개수 (기본 10개)
         *
         *     **날짜:**
         *     - date를 지정하지 않으면 오늘 날짜 기준으로 조회
         */
        get: operations["getCafeteriasWithMenu"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cafeterias/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 특정 구내식당 조회
         * @description ID로 특정 구내식당의 상세 정보를 조회합니다.
         *
         *     **주요 기능:**
         *     - 구내식당 기본 정보
         *     - 활성화된 구내식당만 조회 가능
         *
         *     **에러 케이스:**
         *     - 존재하지 않는 ID: 404 NOT_FOUND
         *     - 비활성화된 구내식당: 404 NOT_FOUND
         */
        get: operations["getCafeteria"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cafeterias/{id}/reviews": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 특정 구내식당의 특정 날짜 식단표 리뷰 조회 (무한 스크롤)
         * @description 특정 구내식당의 특정 날짜 식단표 리뷰를 무한 스크롤로 조회합니다.
         *
         *     **주요 기능:**
         *     - 특정 구내식당의 특정 날짜 리뷰 조회 (cafeteriaId, date 파라미터 필수)
         *     - 식사 시간대별 필터링 가능 (mealType 파라미터 선택)
         *     - 리뷰 기준 무한 스크롤 (size=10이면 리뷰 10개)
         *     - 로그인하지 않은 사용자도 조회 가능
         *
         *     **식사 시간대 필터링:**
         *     - mealType 미입력: 모든 식사 시간대(아침, 점심, 저녁)의 리뷰를 ID 순으로 조회
         *     - mealType 입력: 해당 식사 시간대의 리뷰만 조회
         *       - BREAKFAST: 아침 리뷰만
         *       - LUNCH: 점심 리뷰만
         *       - DINNER: 저녁 리뷰만
         *
         *     **페이징 사용법:**
         *     1. 첫 페이지 (전체): `GET /api/v1/cafeterias/{id}/reviews?date=2025-10-24&size=10`
         *     2. 첫 페이지 (아침만): `GET /api/v1/cafeterias/{id}/reviews?date=2025-10-24&mealType=BREAKFAST&size=10`
         *     3. 다음 페이지: `cursorReviewId`에 응답의 `pageInfo.nextCursor` 전달
         *        - 예: `GET /api/v1/cafeterias/{id}/reviews?date=2025-10-24&cursorReviewId=123&size=10`
         *        - 시간대 필터 유지: `GET /api/v1/cafeterias/{id}/reviews?date=2025-10-24&mealType=BREAKFAST&cursorReviewId=123&size=10`
         *
         *     **참고:**
         *     - 특정 구내식당의 식단표 타임라인은 `/api/v1/cafeterias/{id}/menus/timeline` 사용
         *     - 특정 날짜에 리뷰 개수는 타임라인 API에서 확인 가능
         *     - `pageInfo.hasNext`가 true이면 다음 페이지 존재
         *     - `pageInfo.nextCursor`는 다음 페이지 요청 시 사용할 커서 값 (리뷰 ID)
         */
        get: operations["getCafeteriaMenuReviews"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cafeterias/{id}/menus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 특정 구내식당의 특정 날짜 식단표 조회
         * @description 특정 구내식당의 특정 날짜 식단표를 조회합니다.
         *
         *     **주요 기능:**
         *     - 해당 날짜의 모든 식사 시간대 식단표 (아침, 점심, 저녁)
         *     - 식단표가 없으면 빈 배열 반환
         *
         *     **날짜:**
         *     - date를 지정하지 않으면 오늘 날짜 기준으로 조회
         *
         *     **에러 케이스:**
         *     - 존재하지 않는 구내식당 ID: 404 NOT_FOUND
         *     - 비활성화된 구내식당: 404 NOT_FOUND
         */
        get: operations["getCafeteriaMenuByDate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cafeterias/{id}/menus/timeline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 특정 구내식당의 식단표 타임라인 조회 (무한 스크롤)
         * @description 특정 구내식당의 식단표가 있는 날짜를 타임라인 형태로 조회합니다. (무한 스크롤)
         *
         *     **주요 기능:**
         *     - 특정 구내식당의 식단표가 있는 날짜만 조회 (리뷰가 없어도 표시)
         *     - 각 날짜의 모든 식단표 (아침, 점심, 저녁)
         *     - 각 날짜별 리뷰 개수 포함
         *     - 날짜 기준 무한 스크롤
         *
         *     **페이징 사용법:**
         *     1. 첫 페이지: `GET /api/v1/cafeterias/{id}/menus/timeline?size=10`
         *     2. 다음 페이지: `cursorDate`에 응답의 `pageInfo.nextCursor` 전달
         *        - 예: `GET /api/v1/cafeterias/{id}/menus/timeline?cursorDate=2025-10-23&size=10`
         *
         *     **참고:**
         *     - 특정 날짜 리뷰 리스트 조회는 `/api/v1/cafeterias/{id}/reviews?date={날짜}` 사용
         *     - `pageInfo.hasNext`가 true이면 다음 페이지 존재
         *     - `pageInfo.nextCursor`는 다음 페이지 요청 시 사용할 커서 값 (날짜)
         *
         *     **에러 케이스:**
         *     - 존재하지 않는 구내식당 ID: 식단표가 없으면 빈 리스트 반환
         */
        get: operations["getCafeteriaMenuTimeline"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cafeterias/{id}/menus/availability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 특정 구내식당의 특정 월 일자별 식단표 유무 조회
         * @description 특정 구내식당의 특정 월에 식단표가 있는 일자 목록을 조회합니다.
         *
         *     **주요 기능:**
         *     - 지정한 연도/월에 식단표가 등록된 일자 목록 반환
         *     - 달력 UI에서 식단표 유무 표시에 활용
         *
         *     **조회 가능 범위:**
         *     - 시작: 2025년 10월
         *     - 종료: 현재 월
         *     - 범위를 벗어나면 400 에러
         *
         *     **응답 예시:**
         *     ```json
         *     {
         *       "year": 2025,
         *       "month": 10,
         *       "daysWithMenu": [1, 3, 5, 12, 15, 20, 25]
         *     }
         *     ```
         *
         *     **에러 케이스:**
         *     - 존재하지 않는 구내식당 ID: 404 NOT_FOUND
         *     - 조회 범위 벗어남: 400 BAD_REQUEST
         */
        get: operations["getCafeteriaMenuAvailability"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/login/naver/authorize-url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 네이버 OAuth 인증 URL 조회
         * @description 네이버 OAuth 인증을 위한 인증 URL을 조회합니다.
         *
         *     OAuth 설정을 서버에서 중앙 관리하여 프론트엔드-백엔드 간 설정 동기화를 보장합니다.
         *
         *     **사용 방법:**
         *     1. 프론트엔드의 redirect_uri를 파라미터로 전달하여 이 API 호출
         *     2. 선택적으로 CSRF 방지를 위한 state 파라미터 전달
         *     3. 받은 URL로 사용자를 리다이렉트
         *     4. 사용자가 네이버 로그인 및 동의 완료
         *     5. 프론트엔드 redirect_uri로 인가 코드(code)와 state가 전달됨
         *     6. 인가 코드와 state를 /api/v1/auth/login/naver 엔드포인트로 전달하여 로그인 완료
         *
         *     **참고:**
         *     - redirect_uri는 네이버 개발자 센터에 등록된 URI여야 합니다
         *     - 로컬: http://localhost:3000/api/auth/callback/naver
         *     - 배포: https://nugudi.com/api/auth/callback/naver
         */
        get: operations["getNaverAuthorizeUrl"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/login/kakao/authorize-url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 카카오 OAuth 인증 URL 조회
         * @description 카카오 OAuth 인증을 위한 인증 URL을 조회합니다.
         *
         *     OAuth 설정을 서버에서 중앙 관리하여 프론트엔드-백엔드 간 설정 동기화를 보장합니다.
         *
         *     **사용 방법:**
         *     1. 프론트엔드의 redirect_uri를 파라미터로 전달하여 이 API 호출
         *     2. 받은 URL로 사용자를 리다이렉트
         *     3. 사용자가 카카오 로그인 및 동의 완료
         *     4. 프론트엔드 redirect_uri로 인가 코드(code)가 전달됨
         *     5. 인가 코드를 /api/v1/auth/login/kakao 엔드포인트로 전달하여 로그인 완료
         *
         *     **참고:**
         *     - redirect_uri는 카카오 개발자 콘솔에 등록된 URI여야 합니다
         *     - 로컬: http://localhost:3000/api/auth/callback/kakao
         *     - 배포: https://nugudi.com/api/auth/callback/kakao
         */
        get: operations["getKakaoAuthorizeUrl"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/login/google/authorize-url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 구글 OAuth 인증 URL 조회
         * @description 구글 OAuth 인증을 위한 인증 URL을 조회합니다.
         *
         *     OAuth 설정을 서버에서 중앙 관리하여 프론트엔드-백엔드 간 설정 동기화를 보장합니다.
         *
         *     **사용 방법:**
         *     1. 프론트엔드의 redirect_uri를 파라미터로 전달하여 이 API 호출
         *     2. 받은 URL로 사용자를 리다이렉트
         *     3. 사용자가 구글 로그인 및 동의 완료
         *     4. 프론트엔드 redirect_uri로 인가 코드(code)가 전달됨
         *     5. 인가 코드를 /api/v1/auth/login/google 엔드포인트로 전달하여 로그인 완료
         *
         *     **참고:**
         *     - redirect_uri는 구글 개발자 콘솔에 등록된 URI여야 합니다
         *     - 로컬: http://localhost:3000/api/auth/callback/google
         *     - 배포: https://nugudi.com/api/auth/callback/google
         */
        get: operations["getGoogleAuthorizeUrl"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description 리뷰 작성 요청 */
        CreateReviewRequest: {
            /**
             * Format: int64
             * @description 식당 ID
             * @example 1
             */
            restaurantId: number;
            /**
             * Format: date
             * @description 리뷰 날짜 (오늘로부터 최근 7일 이내)
             * @example 2025-10-24
             */
            reviewDate: string;
            /**
             * @description 식사 타입 (BREAKFAST, LUNCH, DINNER)
             * @example LUNCH
             * @enum {string}
             */
            mealType: "BREAKFAST" | "LUNCH" | "DINNER";
            /**
             * Format: int64
             * @description 맛 평가 타입 ID
             * @example 1
             */
            tasteTypeId: number;
            /**
             * @description 리뷰 내용
             * @example 오늘 점심 너무 맛있었어요 제육볶음 짱..
             */
            content: string;
            /**
             * Format: int64
             * @description 리뷰 이미지 파일 ID (선택)
             * @example 123
             */
            mainImageFileId?: number;
        };
        /** @description 리뷰 작성 응답 */
        CreateReviewResponse: {
            /**
             * Format: int64
             * @description 리뷰 ID
             * @example 1
             */
            reviewId?: number;
        };
        SuccessResponseCreateReviewResponse: {
            /** Format: date-time */
            timestamp?: string;
            success?: boolean;
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["CreateReviewResponse"];
        };
        /** @description 리뷰 댓글 작성 요청 */
        CreateReviewCommentRequest: {
            /**
             * @description 댓글 내용
             * @example 정말 맛있어 보이네요!
             */
            content: string;
            /**
             * Format: int64
             * @description 부모 댓글 ID (대댓글인 경우만 입력, 일반 댓글은 null)
             * @example 123
             */
            parentCommentId?: number;
        };
        /** @description 리뷰 댓글 작성 응답 */
        CreateReviewCommentResponse: {
            /**
             * Format: int64
             * @description 생성된 댓글 ID
             * @example 1
             */
            commentId?: number;
        };
        SuccessResponseCreateReviewCommentResponse: {
            /** Format: date-time */
            timestamp?: string;
            success?: boolean;
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["CreateReviewCommentResponse"];
        };
        SignUpSocialRequest: {
            /**
             * @description 닉네임
             * @example 너구디유저
             */
            nickname: string;
            /** @description 개인정보 처리방침 약관 동의 여부 */
            privacyPolicy: boolean;
            /** @description 이용약관 동의 여부 */
            termsOfService: boolean;
            /** @description 위치정보 수집·이용약관 동의 여부 */
            locationInfo: boolean;
            /** @description 마케팅 이메일 수신 동의 여부 (선택적, 기본값: false) */
            marketingEmail?: boolean;
            deviceInfo: components["schemas"]["UserDeviceInfoDTO"];
        };
        /** @description 디바이스 정보 (일반/소셜 공통) */
        UserDeviceInfoDTO: {
            /**
             * @description 디바이스 타입
             * @example ANDROID
             * @enum {string}
             */
            deviceType: "IOS" | "ANDROID" | "WEB" | "IOS" | "ANDROID" | "WEB";
            /**
             * @description 디바이스 고유 ID
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            deviceUniqueId: string;
            /**
             * @description 디바이스 이름
             * @example iPhone 15 Pro
             */
            deviceName?: string;
            /**
             * @description 디바이스 모델
             * @example iPhone15,2
             */
            deviceModel?: string;
            /**
             * @description OS 버전
             * @example 17.1.1
             */
            osVersion?: string;
            /**
             * @description 앱 버전
             * @example 1.0.0
             */
            appVersion?: string;
            /**
             * @description 푸시 토큰 (알림 동의시에만 필수)
             * @example dHJhbnNhY3Rpb25faWQ6MTIzNDU2Nzg5MA==
             */
            pushToken?: string;
        };
        /** @description 회원가입 성공 응답 (일반/소셜 공통) */
        SignUpResponse: {
            /**
             * Format: int64
             * @description 사용자 ID
             * @example 123
             */
            userId?: number;
            /**
             * @description 사용자 이메일
             * @example user@nugudi.com
             */
            email?: string;
            /**
             * @description 사용자 닉네임
             * @example 너구디유저
             */
            nickname?: string;
            /**
             * @description 액세스 토큰
             * @example eyJhbGciOiJIUzI1NiJ9...
             */
            accessToken?: string;
            /**
             * @description 리프레시 토큰
             * @example eyJhbGciOiJIUzI1NiJ9...
             */
            refreshToken?: string;
            /**
             * Format: date-time
             * @description 액세스 토큰 만료 시간
             */
            accessTokenExpiresAt?: string;
            /**
             * Format: date-time
             * @description 리프레시 토큰 만료 시간
             */
            refreshTokenExpiresAt?: string;
        };
        SuccessResponseSignUpResponse: {
            /** Format: date-time */
            timestamp?: string;
            success?: boolean;
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["SignUpResponse"];
        };
        /** @description 일반 회원가입 요청 정보 */
        SignUpLocalRequest: {
            /**
             * @description 닉네임
             * @example 너구디유저
             */
            nickname: string;
            /**
             * @description 이메일
             * @example user@nugudi.com
             */
            email: string;
            /**
             * @description 비밀번호 (최소 8자 이상, 최대 20자 이하, 영문/숫자/특수문자/대문자 1개 이상 포함)
             * @example SecurePass123!
             */
            password: string;
            /** @description 개인정보 처리방침 약관 동의 여부 */
            privacyPolicy: boolean;
            /** @description 이용약관 동의 여부 */
            termsOfService: boolean;
            /** @description 위치정보 수집·이용약관 동의 여부 */
            locationInfo: boolean;
            /** @description 마케팅 이메일 수신 동의 여부 (선택적, 기본값: false) */
            marketingEmail?: boolean;
            deviceInfo: components["schemas"]["UserDeviceInfoDTO"];
        };
        /** @description 토큰 갱신 응답 */
        RefreshTokenResponse: {
            /**
             * @description 새로운 액세스 토큰
             * @example eyJhbGciOiJIUzI1NiJ9...
             */
            accessToken?: string;
            /**
             * @description 새로운 리프레시 토큰
             * @example eyJhbGciOiJIUzI1NiJ9...
             */
            refreshToken?: string;
            /**
             * Format: date-time
             * @description 액세스 토큰 만료 시간
             */
            accessTokenExpiresAt?: string;
            /**
             * Format: date-time
             * @description 리프레시 토큰 만료 시간
             */
            refreshTokenExpiresAt?: string;
        };
        SuccessResponseRefreshTokenResponse: {
            /** Format: date-time */
            timestamp?: string;
            success?: boolean;
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["RefreshTokenResponse"];
        };
        /** @description 로그아웃 응답 */
        LogoutResponse: {
            /**
             * Format: date-time
             * @description 로그아웃 처리 시간
             */
            logoutAt?: string;
        };
        SuccessResponseLogoutResponse: {
            /** Format: date-time */
            timestamp?: string;
            success?: boolean;
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["LogoutResponse"];
        };
        /** @description 네이버 소셜 로그인 요청 */
        NaverLoginRequest: {
            /**
             * @description 네이버 OAuth 인가 코드 (네이버 로그인 후 발급받은 authorization code)
             * @example mMJrjSJksVH3Z8xK8GQ_Vs...
             */
            code: string;
            /**
             * @description 네이버 인증 시 사용한 redirect URI (인가 URL 조회 시 전달한 값과 동일해야 함)
             * @example https://nugudi.com/api/auth/callback/naver
             */
            redirectUri: string;
            /**
             * @description CSRF 방지를 위한 상태 토큰 (선택적, 인가 URL 조회 시 사용한 값과 동일해야 함)
             * @example STATE_STRING
             */
            state?: string;
            deviceInfo: components["schemas"]["UserDeviceInfoDTO"];
        };
        /** @description 소셜 로그인 응답 */
        SocialLoginResponse: {
            /**
             * @description 카카오 로그인 상태
             * @example EXISTING_USER
             * @enum {string}
             */
            status?: "EXISTING_USER" | "NEW_USER";
            /**
             * Format: int64
             * @description 사용자 ID (기존 회원인 경우)
             * @example 1
             */
            userId?: number;
            /**
             * @description 사용자 닉네임 (기존 회원인 경우)
             * @example 너구디유저
             */
            nickname?: string;
            /**
             * @description 프로필 이미지 URL
             * @example https://cdn.nugudi.com/profile/123.jpg
             */
            profileImageUrl?: string;
            /**
             * @description 액세스 토큰 (기존 회원인 경우)
             * @example eyJhbGciOiJIUzI1NiJ9...
             */
            accessToken?: string;
            /**
             * @description 리프레시 토큰 (기존 회원인 경우)
             * @example eyJhbGciOiJIUzI1NiJ9...
             */
            refreshToken?: string;
            /**
             * Format: date-time
             * @description 액세스 토큰 만료 시간
             */
            accessTokenExpiresAt?: string;
            /**
             * Format: date-time
             * @description 리프레시 토큰 만료 시간
             */
            refreshTokenExpiresAt?: string;
            /**
             * @description 등록 토큰 (신규 회원인 경우)
             * @example eyJhbGciOiJIUzI1NiJ9...
             */
            registrationToken?: string;
            /**
             * Format: date-time
             * @description 등록 토큰 만료 시간 (신규 회원인 경우)
             */
            registrationTokenExpiresAt?: string;
        };
        SuccessResponseSocialLoginResponse: {
            /** Format: date-time */
            timestamp?: string;
            success?: boolean;
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["SocialLoginResponse"];
        };
        /** @description 일반 로그인 요청 */
        LocalLoginRequest: {
            /**
             * @description 이메일
             * @example user@nugudi.com
             */
            email: string;
            /**
             * @description 비밀번호
             * @example SecurePass123!
             */
            password: string;
            deviceInfo: components["schemas"]["UserDeviceInfoDTO"];
        };
        /** @description 일반 로그인 응답 */
        LocalLoginResponse: {
            /**
             * Format: int64
             * @description 사용자 ID
             * @example 1
             */
            userId?: number;
            /**
             * @description 사용자 이메일
             * @example user@nugudi.com
             */
            email?: string;
            /**
             * @description 사용자 닉네임
             * @example 너구디유저
             */
            nickname?: string;
            /**
             * @description 프로필 이미지 URL
             * @example https://cdn.nugudi.com/profile/123.jpg
             */
            profileImageUrl?: string;
            /**
             * @description 액세스 토큰
             * @example eyJhbGciOiJIUzI1NiJ9...
             */
            accessToken?: string;
            /**
             * @description 리프레시 토큰
             * @example eyJhbGciOiJIUzI1NiJ9...
             */
            refreshToken?: string;
            /**
             * Format: date-time
             * @description 액세스 토큰 만료 시간
             */
            accessTokenExpiresAt?: string;
            /**
             * Format: date-time
             * @description 리프레시 토큰 만료 시간
             */
            refreshTokenExpiresAt?: string;
        };
        SuccessResponseLocalLoginResponse: {
            /** Format: date-time */
            timestamp?: string;
            success?: boolean;
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["LocalLoginResponse"];
        };
        /** @description 카카오 소셜 로그인 요청 */
        KakaoLoginRequest: {
            /**
             * @description 카카오 OAuth 인가 코드 (카카오 로그인 후 발급받은 authorization code)
             * @example mMJrjSJksVH3Z8xK8GQ_Vs...
             */
            code: string;
            /**
             * @description 카카오 인증 시 사용한 redirect URI (인가 URL 조회 시 전달한 값과 동일해야 함)
             * @example https://nugudi.com/api/auth/callback/kakao
             */
            redirectUri: string;
            deviceInfo: components["schemas"]["UserDeviceInfoDTO"];
        };
        /** @description 구글 소셜 로그인 요청 */
        GoogleLoginRequest: {
            /**
             * @description 구글 OAuth 인가 코드 (구글 로그인 후 발급받은 authorization code)
             * @example mMJrjSJksVH3Z8xK8GQ_Vs...
             */
            code: string;
            /**
             * @description 구글 인증 시 사용한 redirect URI (인가 URL 조회 시 전달한 값과 동일해야 함)
             * @example https://nugudi.com/api/auth/callback/google
             */
            redirectUri: string;
            deviceInfo: components["schemas"]["UserDeviceInfoDTO"];
        };
        /** @description 이메일 인증 코드 확인 요청 */
        EmailVerifyRequest: {
            /**
             * @description 이메일
             * @example user@nugudi.com
             */
            email: string;
            /**
             * @description 인증 코드
             * @example 123456
             */
            code: string;
            /**
             * @description 인증 목적 (SIGNUP: 회원가입, PASSWORD_RESET: 비밀번호 재설정)
             * @example SIGNUP
             * @enum {string}
             */
            purpose: "SIGNUP" | "PASSWORD_RESET";
        };
        /** @description 이메일 인증 코드 확인 응답 */
        EmailVerifyResponse: {
            /**
             * @description 인증 성공 여부
             * @example true
             */
            verified?: boolean;
        };
        SuccessResponseEmailVerifyResponse: {
            /** Format: date-time */
            timestamp?: string;
            success?: boolean;
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["EmailVerifyResponse"];
        };
        /** @description 이메일 인증 코드 발송 요청 */
        EmailVerificationRequest: {
            /**
             * @description 이메일
             * @example user@nugudi.com
             */
            email: string;
            /**
             * @description 인증 목적 (SIGNUP: 회원가입, PASSWORD_RESET: 비밀번호 재설정)
             * @example SIGNUP
             * @enum {string}
             */
            purpose: "SIGNUP" | "PASSWORD_RESET";
        };
        /** @description 이메일 인증 코드 발송 응답 */
        EmailVerificationResponse: {
            /**
             * Format: int64
             * @description 만료 시간(초)
             * @example 300
             */
            expiresInSeconds?: number;
        };
        SuccessResponseEmailVerificationResponse: {
            /** Format: date-time */
            timestamp?: string;
            success?: boolean;
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["EmailVerificationResponse"];
        };
        /** @description 구내식당 영업시간 정보 */
        BusinessHoursRequest: {
            lunchStartTime?: components["schemas"]["LocalTime"];
            lunchEndTime?: components["schemas"]["LocalTime"];
            dinnerStartTime?: components["schemas"]["LocalTime"];
            dinnerEndTime?: components["schemas"]["LocalTime"];
            /**
             * @description 영업 요일 (예: 평일만 영업하는 경우)
             * @example [
             *       "MONDAY",
             *       "TUESDAY",
             *       "WEDNESDAY",
             *       "THURSDAY",
             *       "FRIDAY"
             *     ]
             */
            operatingDays: ("MONDAY" | "TUESDAY" | "WEDNESDAY" | "THURSDAY" | "FRIDAY" | "SATURDAY" | "SUNDAY")[];
            /**
             * @description 특별 휴무일 (공휴일 등)
             * @example [
             *       "2025-01-01",
             *       "2025-03-01",
             *       "2025-05-05"
             *     ]
             */
            specialHolidays?: string[];
            /**
             * @description 영업시간 비고
             * @example 공휴일 휴무
             */
            note?: string;
        };
        /**
         * @description 저녁 종료 시간
         * @example 19:30:00
         */
        LocalTime: {
            /** Format: int32 */
            hour?: number;
            /** Format: int32 */
            minute?: number;
            /** Format: int32 */
            second?: number;
            /** Format: int32 */
            nano?: number;
        };
        RegisterCafeteriaRequest: {
            name: string;
            address: string;
            addressDetail: string;
            latitude?: number;
            longitude?: number;
            phone?: string;
            description?: string;
            oneLineIntro?: string;
            /** Format: int32 */
            mealTicketPrice?: number;
            /** Format: int64 */
            mainImageFileId?: number;
            businessHours?: components["schemas"]["BusinessHoursRequest"];
            takeoutAvailable: boolean;
        };
        RegisterCafeteriaResponse: {
            /** Format: int64 */
            cafeteriaId?: number;
            name?: string;
            address?: string;
            addressDetail?: string;
            latitude?: number;
            longitude?: number;
            phone?: string;
            description?: string;
            oneLineIntro?: string;
            /** Format: int32 */
            mealTicketPrice?: number;
            /** Format: int64 */
            mainImageFileId?: number;
            takeoutAvailable?: boolean;
            /** Format: date-time */
            createdAt?: string;
        };
        SuccessResponseRegisterCafeteriaResponse: {
            /** Format: date-time */
            timestamp?: string;
            success?: boolean;
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["RegisterCafeteriaResponse"];
        };
        /** @description 메뉴 항목 목록 */
        MenuItemDto: {
            name?: string;
            /** @enum {string} */
            category?: "RICE" | "SOUP" | "MAIN_DISH" | "SIDE_DISH" | "KIMCHI" | "SALAD" | "DESSERT" | "DRINK" | "SPECIAL";
            /** Format: int32 */
            calories?: number;
            caloriesSource?: string;
            /** Format: int32 */
            displayOrder?: number;
        };
        /** @description 구내식당 식단표 등록 요청 */
        RegisterCafeteriaMenuRequest: {
            /**
             * Format: int64
             * @description 구내식당 ID
             * @example 1
             */
            restaurantId: number;
            /**
             * Format: date
             * @description 식단 날짜
             * @example 2024-01-15
             */
            menuDate: string;
            /**
             * @description 식사 시간대 (BREAKFAST, LUNCH, DINNER)
             * @example LUNCH
             * @enum {string}
             */
            mealType: "BREAKFAST" | "LUNCH" | "DINNER";
            /** @description 메뉴 항목 목록 */
            menuItems: components["schemas"]["MenuItemDto"][];
            /**
             * Format: int64
             * @description 메뉴 이미지 파일 ID
             * @example 123
             */
            menuImageFileId?: number;
            /**
             * @description 특이사항 (예: 알레르기 정보, 추가 안내사항)
             * @example 견과류 포함
             */
            specialNote?: string;
        };
        /** @description 구내식당 식단표 등록 응답 */
        RegisterCafeteriaMenuResponse: {
            /**
             * Format: int64
             * @description 식단표 ID
             * @example 1
             */
            menuId?: number;
            /**
             * Format: int64
             * @description 구내식당 ID
             * @example 1
             */
            restaurantId?: number;
            /**
             * Format: date
             * @description 식단 날짜
             * @example 2024-01-15
             */
            menuDate?: string;
            /**
             * @description 식사 시간대
             * @example LUNCH
             * @enum {string}
             */
            mealType?: "BREAKFAST" | "LUNCH" | "DINNER";
            /** @description 메뉴 항목 목록 */
            menuItems?: components["schemas"]["MenuItemDto"][];
            /**
             * Format: int32
             * @description 총 칼로리
             * @example 850
             */
            totalCalories?: number;
            /**
             * Format: int64
             * @description 메뉴 이미지 파일 ID
             * @example 123
             */
            menuImageFileId?: number;
            /**
             * @description 특이사항
             * @example 견과류 포함
             */
            specialNote?: string;
            /**
             * Format: date-time
             * @description 등록 일시
             */
            createdAt?: string;
        };
        SuccessResponseRegisterCafeteriaMenuResponse: {
            /** Format: date-time */
            timestamp?: string;
            success?: boolean;
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["RegisterCafeteriaMenuResponse"];
        };
        /** @description 리뷰 댓글 수정 요청 */
        UpdateReviewCommentRequest: {
            /**
             * @description 수정할 댓글 내용
             * @example 수정된 댓글 내용입니다!
             */
            content: string;
        };
        SuccessResponseUpdateReviewCommentResponse: {
            /** Format: date-time */
            timestamp?: string;
            success?: boolean;
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["UpdateReviewCommentResponse"];
        };
        /** @description 리뷰 댓글 수정 응답 */
        UpdateReviewCommentResponse: {
            /**
             * Format: int64
             * @description 댓글 ID
             * @example 1
             */
            commentId?: number;
            /**
             * @description 수정된 댓글 내용
             * @example 수정된 댓글 내용입니다!
             */
            content?: string;
            /**
             * Format: date-time
             * @description 수정 시간
             */
            updatedAt?: string;
        };
        /** @description 닉네임 사용 가능 여부 확인 응답 */
        NicknameCheckResponse: {
            /**
             * @description 확인한 닉네임
             * @example 너구디유저
             */
            nickname?: string;
            /**
             * @description 사용 가능한지 여부
             * @example true
             */
            available?: boolean;
        };
        SuccessResponseNicknameCheckResponse: {
            /** Format: date-time */
            timestamp?: string;
            success?: boolean;
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["NicknameCheckResponse"];
        };
        GetMyProfileResponse: {
            profile?: components["schemas"]["UserProfileDTO"];
            account?: components["schemas"]["UserAccountDTO"];
            health?: components["schemas"]["HealthInfoDTO"];
        };
        HealthInfoDTO: {
            /** Format: int32 */
            height?: number;
            weight?: number;
        };
        SuccessResponseGetMyProfileResponse: {
            /** Format: date-time */
            timestamp?: string;
            success?: boolean;
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["GetMyProfileResponse"];
        };
        UserAccountDTO: {
            /** @enum {string} */
            provider?: "LOCAL" | "GOOGLE" | "APPLE" | "KAKAO" | "NAVER";
            email?: string;
        };
        UserProfileDTO: {
            /** Format: int64 */
            userId?: number;
            nickname?: string;
            profileImageUrl?: string;
            /** Format: date */
            joinDate?: string;
        };
        /** @description 작성자 정보 */
        AuthorInfo: {
            /**
             * Format: int64
             * @description 작성자 ID
             * @example 1
             */
            userId?: number;
            /**
             * @description 작성자 닉네임
             * @example 맛집탐험가
             */
            nickname?: string;
            /**
             * @description 프로필 이미지 URL
             * @example https://example.com/profile.jpg
             */
            profileImageUrl?: string;
        };
        /** @description 댓글 정보 */
        CommentInfo: {
            /**
             * Format: int64
             * @description 댓글 ID
             * @example 1
             */
            commentId?: number;
            /**
             * @description 댓글 내용 (상태별 메시지)
             *     - ACTIVE: 원본 댓글 내용
             *     - USER_DELETED: '사용자가 삭제한 댓글입니다'
             *     - OWNER_WITHDRAWN: '탈퇴한 사용자의 댓글입니다'
             *     - ADMIN_DELETED: '관리자에 의해 삭제된 댓글입니다'
             *     - BLOCKED: '차단된 댓글입니다'
             *     - REPORTED: '신고 검토중인 댓글입니다'
             * @example 정말 맛있어 보이네요!
             */
            content?: string;
            /**
             * @description 댓글 상태
             * @example ACTIVE
             * @enum {string}
             */
            commentStatus?: "ACTIVE" | "USER_DELETED" | "OWNER_WITHDRAWN" | "ADMIN_DELETED" | "BLOCKED" | "REPORTED";
            /**
             * Format: date-time
             * @description 작성 시간
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description 마지막 수정 시간 (수정되지 않았다면 createdAt과 동일)
             */
            updatedAt?: string;
            /**
             * @description 본인 작성 여부 (로그인 안한 경우 항상 false)
             * @example true
             */
            isAuthor?: boolean;
        };
        /** @description 리뷰 댓글 조회 응답 */
        GetReviewCommentResponse: {
            comment?: components["schemas"]["CommentInfo"];
            author?: components["schemas"]["AuthorInfo"];
            replyMetadata?: components["schemas"]["ReplyMetadata"];
        };
        PageInfo: {
            /**
             * @description 다음 페이지 커서 (ID, 날짜 등)
             * @example 123 또는 2025-10-24
             */
            nextCursor?: string;
            /**
             * Format: int32
             * @description 현재 페이지의 아이템 개수
             * @example 10
             */
            size?: number;
            /**
             * @description 다음 페이지 존재 여부
             * @example true
             */
            hasNext?: boolean;
        };
        PageResponseGetReviewCommentResponse: {
            /** Format: date-time */
            timestamp?: string;
            success?: boolean;
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["GetReviewCommentResponse"][];
            pageInfo?: components["schemas"]["PageInfo"];
        };
        /** @description 대댓글 메타 정보 */
        ReplyMetadata: {
            /**
             * Format: int64
             * @description 전체 대댓글 개수
             * @example 15
             */
            totalReplyCount?: number;
            /**
             * @description 대댓글 존재 여부
             * @example true
             */
            hasReplies?: boolean;
        };
        PageResponseReplyInfo: {
            /** Format: date-time */
            timestamp?: string;
            success?: boolean;
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["ReplyInfo"][];
            pageInfo?: components["schemas"]["PageInfo"];
        };
        /** @description 대댓글 정보 */
        ReplyInfo: {
            comment?: components["schemas"]["CommentInfo"];
            author?: components["schemas"]["AuthorInfo"];
        };
        BusinessHoursDTO: {
            lunch?: components["schemas"]["TimeRangeDTO"];
            dinner?: components["schemas"]["TimeRangeDTO"];
            note?: string;
        };
        CafeteriaInfoDTO: {
            /** Format: int64 */
            id?: number;
            name?: string;
            address?: string;
            addressDetail?: string;
            latitude?: number;
            longitude?: number;
            phone?: string;
            /** Format: int32 */
            mealTicketPrice?: number;
            takeoutAvailable?: boolean;
            businessHours?: components["schemas"]["BusinessHoursDTO"];
        };
        GetCafeteriaWithMenuResponse: {
            cafeteria?: components["schemas"]["CafeteriaInfoDTO"];
            menus?: components["schemas"]["MenuInfoDTO"][];
        };
        MenuInfoDTO: {
            mealType?: string;
            menuItems?: components["schemas"]["MenuItemDto"][];
            specialNote?: string;
            nutritionInfo?: components["schemas"]["NutritionInfoDTO"];
        };
        NutritionInfoDTO: {
            /** Format: int32 */
            totalCalories?: number;
            /** Format: int32 */
            dailyPercentage?: number;
            /** Format: int32 */
            walkingSteps?: number;
            /** Format: int32 */
            runningKm?: number;
            /** Format: int32 */
            cyclingKm?: number;
            /** Format: int32 */
            stairsFloors?: number;
        };
        PageResponseGetCafeteriaWithMenuResponse: {
            /** Format: date-time */
            timestamp?: string;
            success?: boolean;
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["GetCafeteriaWithMenuResponse"][];
            pageInfo?: components["schemas"]["PageInfo"];
        };
        TimeRangeDTO: {
            start?: components["schemas"]["LocalTime"];
            end?: components["schemas"]["LocalTime"];
        };
        GetCafeteriaResponse: {
            cafeteria?: components["schemas"]["CafeteriaInfoDTO"];
        };
        SuccessResponseGetCafeteriaResponse: {
            /** Format: date-time */
            timestamp?: string;
            success?: boolean;
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["GetCafeteriaResponse"];
        };
        /** @description 구내식당 정보 */
        CafeteriaInfo: {
            /**
             * Format: int64
             * @description 구내식당 ID
             * @example 1
             */
            restaurantId?: number;
            /**
             * @description 구내식당 이름
             * @example 본관 학생식당
             */
            restaurantName?: string;
            /**
             * @description 식사 타입
             * @example 점심
             */
            mealType?: string;
        };
        /** @description 특정 구내식당의 특정 날짜 식단표 리뷰 조회 (무한 스크롤) 응답 */
        GetCafeteriaMenuReviewResponse: {
            cafeteria?: components["schemas"]["CafeteriaInfo"];
            review?: components["schemas"]["ReviewInfo"];
            reviewer?: components["schemas"]["ReviewerInfo"];
        };
        PageResponseGetCafeteriaMenuReviewResponse: {
            /** Format: date-time */
            timestamp?: string;
            success?: boolean;
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["GetCafeteriaMenuReviewResponse"][];
            pageInfo?: components["schemas"]["PageInfo"];
        };
        /** @description 리뷰 정보 */
        ReviewInfo: {
            /**
             * Format: int64
             * @description 리뷰 ID
             * @example 1
             */
            reviewId?: number;
            /**
             * Format: date
             * @description 리뷰 날짜
             * @example 2025-10-24
             */
            reviewDate?: string;
            /**
             * @description 리뷰 내용
             * @example 오늘 메뉴 정말 맛있었어요!
             */
            content?: string;
            /**
             * Format: int64
             * @description 메인 이미지 파일 ID
             * @example 123
             */
            mainImageFileId?: number;
            /**
             * Format: int64
             * @description 맛 평가 타입 ID
             * @example 1
             */
            tasteTypeId?: number;
            /**
             * @description 맛 평가 타입 이름
             * @example 맛있어요
             */
            tasteTypeName?: string;
            /**
             * Format: int32
             * @description 좋아요 수
             * @example 15
             */
            likeCount?: number;
            /**
             * Format: date-time
             * @description 작성일시
             */
            createdAt?: string;
        };
        /** @description 리뷰 작성자 정보 */
        ReviewerInfo: {
            /**
             * Format: int64
             * @description 사용자 ID
             * @example 1
             */
            userId?: number;
            /**
             * @description 닉네임
             * @example 맛집러버
             */
            nickname?: string;
            /**
             * @description 프로필 이미지 URL
             * @example https://example.com/profile.jpg
             */
            profileImageUrl?: string;
        };
        GetCafeteriaMenuResponse: {
            /** Format: date */
            menuDate?: string;
            menus?: components["schemas"]["MenuInfoDTO"][];
        };
        SuccessResponseGetCafeteriaMenuResponse: {
            /** Format: date-time */
            timestamp?: string;
            success?: boolean;
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["GetCafeteriaMenuResponse"];
        };
        /** @description 특정 구내식당의 식단표 타임라인 조회 (무한 스크롤) */
        GetCafeteriaMenuTimelineResponse: {
            /** Format: date */
            menuDate?: string;
            menus?: components["schemas"]["MenuDTO"][];
            /** Format: int64 */
            reviewCount?: number;
        };
        MenuDTO: {
            /** Format: date */
            menuDate?: string;
            mealType?: string;
            menuItems?: components["schemas"]["MenuItemDTO"][];
            specialNote?: string;
            /** Format: int32 */
            totalCalories?: number;
        };
        MenuItemDTO: {
            name?: string;
            category?: string;
            /** Format: int32 */
            calories?: number;
        };
        PageResponseGetCafeteriaMenuTimelineResponse: {
            /** Format: date-time */
            timestamp?: string;
            success?: boolean;
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["GetCafeteriaMenuTimelineResponse"][];
            pageInfo?: components["schemas"]["PageInfo"];
        };
        GetCafeteriaMenuAvailabilityResponse: {
            /** Format: int32 */
            year?: number;
            /** Format: int32 */
            month?: number;
            daysWithMenu?: number[];
        };
        SuccessResponseGetCafeteriaMenuAvailabilityResponse: {
            /** Format: date-time */
            timestamp?: string;
            success?: boolean;
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["GetCafeteriaMenuAvailabilityResponse"];
        };
        GetNaverAuthorizeResponse: {
            authorizeUrl?: string;
        };
        SuccessResponseGetNaverAuthorizeResponse: {
            /** Format: date-time */
            timestamp?: string;
            success?: boolean;
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["GetNaverAuthorizeResponse"];
        };
        GetKakaoAuthorizeResponse: {
            authorizeUrl?: string;
        };
        SuccessResponseGetKakaoAuthorizeResponse: {
            /** Format: date-time */
            timestamp?: string;
            success?: boolean;
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["GetKakaoAuthorizeResponse"];
        };
        GetGoogleAuthorizeResponse: {
            authorizeUrl?: string;
        };
        SuccessResponseGetGoogleAuthorizeResponse: {
            /** Format: date-time */
            timestamp?: string;
            success?: boolean;
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["GetGoogleAuthorizeResponse"];
        };
        /** @description 리뷰 댓글 삭제 응답 */
        DeleteReviewCommentResponse: {
            /**
             * Format: int64
             * @description 삭제된 댓글 ID
             * @example 1
             */
            commentId?: number;
        };
        SuccessResponseDeleteReviewCommentResponse: {
            /** Format: date-time */
            timestamp?: string;
            success?: boolean;
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["DeleteReviewCommentResponse"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    createReview: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateReviewRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseCreateReviewResponse"];
                };
            };
        };
    };
    getReviewComments: {
        parameters: {
            query?: {
                /**
                 * @description 페이징 커서 - 이전 응답의 마지막 댓글 ID (첫 페이지는 생략, 다음 페이지 조회 시 응답의 nextCursor 값 사용)
                 * @example 123
                 */
                cursor?: number;
                /**
                 * @description 한 번에 조회할 댓글 개수 (최소 1개, 최대 50개)
                 * @example 20
                 */
                size?: number;
            };
            header?: never;
            path: {
                /**
                 * @description 리뷰 ID
                 * @example 1
                 */
                reviewId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageResponseGetReviewCommentResponse"];
                };
            };
        };
    };
    createReviewComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description 리뷰 ID
                 * @example 1
                 */
                reviewId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateReviewCommentRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseCreateReviewCommentResponse"];
                };
            };
        };
    };
    signUpSocial: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description 카카오 로그인 후 받은 임시 회원 등록 토큰 (202 상태코드와 함께 받은 토큰)
                 * @example eyJhbGciOiJIUzI1NiJ9...
                 */
                "X-Registration-Token": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignUpSocialRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseSignUpResponse"];
                };
            };
        };
    };
    signUpLocal: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignUpLocalRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseSignUpResponse"];
                };
            };
        };
    };
    refreshToken: {
        parameters: {
            query?: never;
            header: {
                "X-Device-ID": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseRefreshTokenResponse"];
                };
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header: {
                "X-Refresh-Token": string;
                "X-Device-ID": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseLogoutResponse"];
                };
            };
        };
    };
    naverLogin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NaverLoginRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseSocialLoginResponse"];
                };
            };
        };
    };
    localLogin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LocalLoginRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseLocalLoginResponse"];
                };
            };
        };
    };
    kakaoLogin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["KakaoLoginRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseSocialLoginResponse"];
                };
            };
        };
    };
    googleLogin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GoogleLoginRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseSocialLoginResponse"];
                };
            };
        };
    };
    verifyEmailCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailVerifyRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseEmailVerifyResponse"];
                };
            };
        };
    };
    sendEmailVerificationCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailVerificationRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseEmailVerificationResponse"];
                };
            };
        };
    };
    registerCafeteria: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterCafeteriaRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseRegisterCafeteriaResponse"];
                };
            };
        };
    };
    registerCafeteriaMenu: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterCafeteriaMenuRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseRegisterCafeteriaMenuResponse"];
                };
            };
        };
    };
    deleteComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description 댓글 ID
                 * @example 1
                 */
                commentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseDeleteReviewCommentResponse"];
                };
            };
        };
    };
    updateComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description 댓글 ID
                 * @example 1
                 */
                commentId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateReviewCommentRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseUpdateReviewCommentResponse"];
                };
            };
        };
    };
    checkNicknameAvailability: {
        parameters: {
            query: {
                /** @description 확인할 닉네임 (2~12자, 한글/영문/숫자만) */
                nickname: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseNicknameCheckResponse"];
                };
            };
        };
    };
    getMyProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseGetMyProfileResponse"];
                };
            };
        };
    };
    getReplies: {
        parameters: {
            query?: {
                /**
                 * @description 페이징 커서 - 이전 응답의 마지막 대댓글 ID (첫 페이지는 생략, 다음 페이지 조회 시 응답의 nextCursor 값 사용)
                 * @example 123
                 */
                cursor?: number;
                /**
                 * @description 한 번에 조회할 대댓글 개수 (최소 1개, 최대 50개)
                 * @example 20
                 */
                size?: number;
            };
            header?: never;
            path: {
                /**
                 * @description 부모 댓글 ID
                 * @example 1
                 */
                commentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageResponseReplyInfo"];
                };
            };
        };
    };
    getCafeteriasWithMenu: {
        parameters: {
            query?: {
                /** @description 커서 (이전 페이지의 마지막 구내식당 ID, 첫 페이지는 null) */
                cursor?: number;
                /** @description 조회할 개수 (기본 10개) */
                size?: number;
                /** @description 조회할 식단표 날짜 (null이면 오늘) */
                date?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageResponseGetCafeteriaWithMenuResponse"];
                };
            };
        };
    };
    getCafeteria: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 구내식당 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseGetCafeteriaResponse"];
                };
            };
        };
    };
    getCafeteriaMenuReviews: {
        parameters: {
            query: {
                /**
                 * @description 조회할 리뷰 대상 날짜 (필수)
                 * @example 2025-10-24
                 */
                date: string;
                /**
                 * @description 식사 시간대 (선택) - 미입력 시 모든 시간대 조회, 입력 시 해당 시간대만 조회
                 * @example BREAKFAST
                 */
                mealType?: "BREAKFAST" | "LUNCH" | "DINNER";
                /**
                 * @description 페이징 커서 - 이전 응답의 마지막 리뷰 ID (첫 페이지는 생략, 다음 페이지 조회 시 응답의 nextCursor 값 사용)
                 * @example 123
                 */
                cursorReviewId?: number;
                /**
                 * @description 한 번에 조회할 리뷰 개수 (기본 10개, 최대 100개 권장)
                 * @example 10
                 */
                size?: number;
            };
            header?: never;
            path: {
                /**
                 * @description 구내식당 ID
                 * @example 1
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageResponseGetCafeteriaMenuReviewResponse"];
                };
            };
        };
    };
    getCafeteriaMenuByDate: {
        parameters: {
            query?: {
                /** @description 조회할 식단표 날짜 (null이면 오늘) */
                date?: string;
            };
            header?: never;
            path: {
                /** @description 구내식당 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseGetCafeteriaMenuResponse"];
                };
            };
        };
    };
    getCafeteriaMenuTimeline: {
        parameters: {
            query?: {
                /**
                 * @description 커서 날짜 (이전 응답의 nextCursorString 값, 첫 페이지는 null)
                 * @example 2025-10-24
                 */
                cursorDate?: string;
                /**
                 * @description 조회할 날짜 수 (기본 10개)
                 * @example 10
                 */
                size?: number;
            };
            header?: never;
            path: {
                /**
                 * @description 구내식당 ID
                 * @example 1
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageResponseGetCafeteriaMenuTimelineResponse"];
                };
            };
        };
    };
    getCafeteriaMenuAvailability: {
        parameters: {
            query: {
                /** @description 조회할 년도 (2025 이상) */
                year: number;
                /** @description 조회할 월 (1-12) */
                month: number;
            };
            header?: never;
            path: {
                /** @description 구내식당 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseGetCafeteriaMenuAvailabilityResponse"];
                };
            };
        };
    };
    getNaverAuthorizeUrl: {
        parameters: {
            query: {
                /**
                 * @description 네이버 인증 완료 후 리다이렉트될 URI
                 * @example https://nugudi.com/api/auth/callback/naver
                 */
                redirectUri: string;
                /**
                 * @description CSRF 방지를 위한 상태 토큰 (선택)
                 * @example STATE_STRING
                 */
                state?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseGetNaverAuthorizeResponse"];
                };
            };
        };
    };
    getKakaoAuthorizeUrl: {
        parameters: {
            query: {
                /**
                 * @description 카카오 인증 완료 후 리다이렉트될 URI
                 * @example https://nugudi.com/api/auth/callback/kakao
                 */
                redirectUri: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseGetKakaoAuthorizeResponse"];
                };
            };
        };
    };
    getGoogleAuthorizeUrl: {
        parameters: {
            query: {
                /**
                 * @description 구글 인증 완료 후 리다이렉트될 URI
                 * @example https://nugudi.com/api/auth/callback/google
                 */
                redirectUri: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponseGetGoogleAuthorizeResponse"];
                };
            };
        };
    };
}
